#ifndef _UniversalFrag_h_
#define _UniversalFrag_h_


// Header generated from binary by WriteAsBinHeader()..
static const int UniversalFragLength = 2364;
static const unsigned int UniversalFrag[UniversalFragLength]={
	0x20205350,	0xFFFF0008,	0x00000048,	0x01020000,	0x000001B6,	0x00000040,	0x00000000,	0x00000000,	0x00000004,	0x00000000,
	0x00000015,	0x00000002,	0x00000000,	0x00000000,	0x00000009,	0x00000000,	0x0000022F,	0x00000115,	0x02000000,	0x01070002,
	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18801100,	0x00000000,	0x02000000,	0x01070002,	0x0C0861AA,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01080000,	0x00B823A4,	0x00000000,	0x00000000,	0x00000000,
	0x18000C00,	0x00000000,	0x03000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,
	0x08000000,	0x0204A441,	0x02382300,	0x00000000,	0x00000000,	0x00000000,	0x18000800,	0x00000000,	0x05000000,	0x01070002,
	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01080000,	0x00B823FF,	0x00000000,
	0x00000000,	0x00000000,	0x18000400,	0x00000000,	0x06000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,
	0x18800200,	0x00000000,	0x08000000,	0x0204FF41,	0x02102700,	0x00000000,	0x00000000,	0x01070000,	0x00B82355,	0x00000000,
	0x00000000,	0x00000000,	0x18003800,	0x00000000,	0x03000000,	0x01070002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,
	0x18801100,	0x00000000,	0x02000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,
	0x00000000,	0x01090000,	0x00B823A4,	0x00000000,	0x00000000,	0x00000000,	0x18000C00,	0x00000000,	0x03000000,	0x01070002,
	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x09000000,	0x0204A441,	0x02382300,	0x00000000,
	0x00000000,	0x00000000,	0x18000800,	0x00000000,	0x05000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,
	0x18800200,	0x00000000,	0x00000000,	0x01090000,	0x00B823FF,	0x00000000,	0x00000000,	0x00000000,	0x18000400,	0x00000000,
	0x06000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x09000000,	0x0204FF41,
	0x02102700,	0x00000000,	0x00000000,	0x01070000,	0x00B82355,	0x00000000,	0x00000000,	0x00000000,	0x18002500,	0x00000000,
	0x05000000,	0x01070002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18801100,	0x00000000,	0x02000000,	0x01070002,
	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01000000,	0x00B823A4,	0x00000000,
	0x00000000,	0x00000000,	0x18000C00,	0x00000000,	0x03000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,
	0x18800200,	0x00000000,	0x00000000,	0x0204A441,	0x02382300,	0x00000000,	0x00000000,	0x00000000,	0x18000800,	0x00000000,
	0x05000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01000000,
	0x00B823FF,	0x00000000,	0x00000000,	0x00000000,	0x18000400,	0x00000000,	0x06000000,	0x01070002,	0x0C0861AA,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x0204FF41,	0x02102700,	0x00000000,	0x00000000,	0x01070000,
	0x00B82355,	0x00000000,	0x00000000,	0x00000000,	0x18001200,	0x00000000,	0x06000000,	0x01070002,	0x0C086155,	0x00000000,
	0x00000000,	0x06010000,	0x18801000,	0x00000000,	0x02000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,
	0x18800200,	0x00000000,	0x00000000,	0x01010000,	0x00B823A4,	0x00000000,	0x00000000,	0x00000000,	0x18000C00,	0x00000000,
	0x03000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x01000000,	0x0204A441,
	0x02382300,	0x00000000,	0x00000000,	0x00000000,	0x18000800,	0x00000000,	0x05000000,	0x01070002,	0x0C0861AA,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01010000,	0x00B823FF,	0x00000000,	0x00000000,	0x00000000,
	0x18000400,	0x00000000,	0x06000000,	0x01070002,	0x0C0861AA,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,
	0x01000000,	0x0204FF41,	0x02102700,	0x00000000,	0x00000000,	0x01070000,	0x00B82355,	0x00000000,	0x02000000,	0x01070002,
	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,	0x18800800,	0x00000000,	0x02000000,	0x010A0002,	0x0C086100,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01080000,	0x00C023FF,	0x00000000,	0x00000000,	0x00000000,
	0x18000300,	0x00000000,	0x03000000,	0x010A0002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,	0x18800100,	0x00000000,
	0x08000000,	0x0204FF41,	0x02402300,	0x00000000,	0x00000000,	0x00000000,	0x18001D00,	0x00000000,	0x03000000,	0x01070002,
	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,	0x18800800,	0x00000000,	0x02000000,	0x010A0002,	0x0C086100,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01090000,	0x00C023FF,	0x00000000,	0x00000000,	0x00000000,
	0x18000300,	0x00000000,	0x03000000,	0x010A0002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,	0x18800100,	0x00000000,
	0x09000000,	0x0204FF41,	0x02402300,	0x00000000,	0x00000000,	0x00000000,	0x18001300,	0x00000000,	0x05000000,	0x01070002,
	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,	0x18800800,	0x00000000,	0x02000000,	0x010A0002,	0x0C086100,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01000000,	0x00C023FF,	0x00000000,	0x00000000,	0x00000000,
	0x18000300,	0x00000000,	0x03000000,	0x010A0002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,	0x18800100,	0x00000000,
	0x00000000,	0x0204FF41,	0x02402300,	0x00000000,	0x00000000,	0x00000000,	0x18000900,	0x00000000,	0x06000000,	0x01070002,
	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,	0x18800700,	0x00000000,	0x02000000,	0x010A0002,	0x0C086100,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01010000,	0x00C023FF,	0x00000000,	0x00000000,	0x00000000,
	0x18000300,	0x00000000,	0x03000000,	0x010A0002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,	0x18800100,	0x00000000,
	0x01000000,	0x0204FF41,	0x02402300,	0x00000000,	0x00000000,	0x01030000,	0x00F820E4,	0x00000000,	0x00000000,	0x00000000,
	0x1E000000,	0x00000000,	0x00000000,	0x010A0002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800A00,	0x00000000,
	0x00000000,	0x020C0000,	0x00902200,	0x00000000,	0x00000000,	0x02120000,	0x00A02200,	0x00000000,	0x00000000,	0x020F0000,
	0x00C02200,	0x00000000,	0x00000000,	0x02150000,	0x00882500,	0x00000000,	0x00000000,	0x02080000,	0x00F826E4,	0x00000000,
	0x00000000,	0x02180000,	0x00902500,	0x00000000,	0x00000000,	0x02190000,	0x00A02500,	0x00000000,	0x00000000,	0x020A0000,
	0x00C02500,	0x00000000,	0x00000000,	0x020B0000,	0x00882700,	0x00000000,	0x00000000,	0x00000000,	0x18000B00,	0x00000000,
	0x02000000,	0x010A0002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800900,	0x00000000,	0x00000000,	0x021E0000,
	0x00902200,	0x00000000,	0x00000000,	0x02240000,	0x00A02200,	0x00000000,	0x00000000,	0x02210000,	0x00C02200,	0x00000000,
	0x00000000,	0x02270000,	0x00882500,	0x00000000,	0x00000000,	0x021A0000,	0x00F826E4,	0x00000000,	0x00000000,	0x022A0000,
	0x00902500,	0x00000000,	0x00000000,	0x022B0000,	0x00A02500,	0x00000000,	0x00000000,	0x021C0000,	0x00C02500,	0x00000000,
	0x00000000,	0x021D0000,	0x00882700,	0x00000000,	0x00000000,	0x010B0000,	0x00F820E4,	0x00000000,	0x00000000,	0x010C0000,
	0x00F821E4,	0x00000000,	0x00000000,	0x010D0000,	0x00F828E4,	0x00000000,	0x00000000,	0x01060000,	0x00F829E4,	0x00000000,
	0x00000000,	0x01020000,	0x00902755,	0x00000000,	0x00000000,	0x01020000,	0x00A027AA,	0x00000000,	0x00000000,	0x01020000,
	0x00C027FF,	0x00000000,	0x00000000,	0x01050000,	0x00882A00,	0x00000000,	0x00000000,	0x00000000,	0x1C016C00,	0x00000000,
	0x00000000,	0x01000000,	0x00F82EE4,	0x00000000,	0x00000000,	0x010A0002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,
	0x18800500,	0x00000000,	0x00000000,	0x020D0000,	0x00902200,	0x00000000,	0x00000000,	0x02130000,	0x00A02200,	0x00000000,
	0x00000000,	0x02100000,	0x00C02200,	0x00000000,	0x00000000,	0x02160000,	0x00882500,	0x00000000,	0x00000000,	0x00000000,
	0x18000600,	0x00000000,	0x02000000,	0x010A0002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800400,	0x00000000,
	0x00000000,	0x021F0000,	0x00902200,	0x00000000,	0x00000000,	0x02250000,	0x00A02200,	0x00000000,	0x00000000,	0x02220000,
	0x00C02200,	0x00000000,	0x00000000,	0x02280000,	0x00882500,	0x00000000,	0x00000000,	0x010B0000,	0x00F820E4,	0x00000000,
	0x00000000,	0x010C0000,	0x00F821E4,	0x00000000,	0x00000000,	0x010D0000,	0x00F828E4,	0x00000000,	0x00000000,	0x01060000,
	0x00F829E4,	0x00000000,	0x00000000,	0x01020000,	0x00902755,	0x00000000,	0x00000000,	0x01020000,	0x00A027AA,	0x00000000,
	0x00000000,	0x01020000,	0x00C027FF,	0x00000000,	0x00000000,	0x01050000,	0x00882A00,	0x00000000,	0x00000000,	0x00000000,
	0x1C015500,	0x00000000,	0x00000000,	0x01000000,	0x00F82FE4,	0x00000000,	0x00000000,	0x010A0002,	0x0C086155,	0x00000000,
	0x00000000,	0x06010000,	0x18800500,	0x00000000,	0x00000000,	0x020E0000,	0x00902200,	0x00000000,	0x00000000,	0x02140000,
	0x00A02200,	0x00000000,	0x00000000,	0x02110000,	0x00C02200,	0x00000000,	0x00000000,	0x02170000,	0x00882500,	0x00000000,
	0x00000000,	0x00000000,	0x18000600,	0x00000000,	0x02000000,	0x010A0002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,
	0x18800400,	0x00000000,	0x00000000,	0x02200000,	0x00902200,	0x00000000,	0x00000000,	0x02260000,	0x00A02200,	0x00000000,
	0x00000000,	0x02230000,	0x00C02200,	0x00000000,	0x00000000,	0x02290000,	0x00882500,	0x00000000,	0x00000000,	0x010B0000,
	0x00F820E4,	0x00000000,	0x00000000,	0x010C0000,	0x00F821E4,	0x00000000,	0x00000000,	0x010D0000,	0x00F828E4,	0x00000000,
	0x00000000,	0x01060000,	0x00F829E4,	0x00000000,	0x00000000,	0x01020000,	0x00902755,	0x00000000,	0x00000000,	0x01020000,
	0x00A027AA,	0x00000000,	0x00000000,	0x01020000,	0x00C027FF,	0x00000000,	0x00000000,	0x01050000,	0x00882A00,	0x00000000,
	0x00000000,	0x00000000,	0x1C013E00,	0x00000000,	0x02000000,	0x01050002,	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,
	0x18800200,	0x00000000,	0x00000000,	0x010E0000,	0x00B824A4,	0x00000000,	0x00000000,	0x00000000,	0x18002E00,	0x00000000,
	0x03000000,	0x01050002,	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x0F000000,	0x010EA401,
	0x033824A4,	0x00000000,	0x00000000,	0x00000000,	0x18002A00,	0x00000000,	0x05000000,	0x01050002,	0x0C0861FF,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x0F000000,	0x010EA401,	0x023824A4,	0x00000000,	0x00000000,	0x00000000,
	0x18002600,	0x00000000,	0x06000000,	0x01050002,	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,	0x18800300,	0x00000000,
	0x0F000000,	0x010E9001,	0x02702790,	0x00000000,	0x07000000,	0x01070042,	0x023824F9,	0x00000000,	0x00000000,	0x00000000,
	0x18002100,	0x00000000,	0x0C000000,	0x01250002,	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,	0x18800500,	0x00000000,
	0x00000000,	0x02019041,	0x02702790,	0x00000000,	0x0F000000,	0x01079001,	0x237027E4,	0x00000000,	0x00E40107,	0x010E9001,
	0x0EF02790,	0x00000000,	0x00000000,	0x01070000,	0x00B824F9,	0x00000000,	0x00000000,	0x00000000,	0x18001A00,	0x00000000,
	0x0D000000,	0x01250002,	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x0F000000,	0x010EA441,
	0x023824A4,	0x00000000,	0x00000000,	0x00000000,	0x18001600,	0x00000000,	0x0E000000,	0x01250002,	0x0C0860FF,	0x00000000,
	0x00000000,	0x023E0020,	0x00902700,	0x00000000,	0x00000000,	0x023E0030,	0x00902755,	0x00000000,	0x0F000000,	0x01250002,
	0x0C0860FF,	0x00000000,	0x00000000,	0x023F0020,	0x00A02700,	0x00000000,	0x00000000,	0x023F0030,	0x00A02755,	0x00000000,
	0x07000000,	0x0107AA01,	0x02222755,	0x00000000,	0x07000000,	0x0201AA01,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,
	0x18800D00,	0x00000000,	0x07000000,	0x010E0042,	0x02102700,	0x00000000,	0x07000000,	0x010F0042,	0x02202700,	0x00000000,
	0x07000000,	0x0107AA01,	0x03202755,	0x00000000,	0x07000000,	0x010E0042,	0x02102755,	0x00000000,	0x07000000,	0x010F0042,
	0x02402755,	0x00000000,	0x00000000,	0x01070000,	0x208828AA,	0x00000000,	0x07000108,	0x0107FF01,	0x0E882855,	0x00000000,
	0x07000000,	0x010E0042,	0x021028AA,	0x00000000,	0x07000000,	0x010F0042,	0x022028AA,	0x00000000,	0x00000000,	0x01080000,
	0x20882900,	0x00000000,	0x08000109,	0x0108AA01,	0x0E882955,	0x00000000,	0x09000000,	0x02300001,	0x03082900,	0x00000000,
	0x00000000,	0x01090000,	0x00F82400,	0x00000000,	0x04000000,	0x0105A401,	0x03382455,	0x00000000,	0x0F000000,	0x01250002,
	0x0D8861FF,	0x00000000,	0x00000000,	0x06010000,	0x18801B00,	0x00000000,	0x02000000,	0x01070002,	0x0C086100,	0x00000000,
	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x010E0000,	0x00C024FF,	0x00000000,	0x00000000,	0x00000000,
	0x18001700,	0x00000000,	0x03000000,	0x01070002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,
	0x0F000000,	0x010EFF01,	0x034024FF,	0x00000000,	0x00000000,	0x00000000,	0x18001300,	0x00000000,	0x05000000,	0x01070002,
	0x0C086100,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x0F000000,	0x010EFF01,	0x024024FF,	0x00000000,
	0x00000000,	0x00000000,	0x18000F00,	0x00000000,	0x06000000,	0x01070002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,
	0x18800300,	0x00000000,	0x0F000000,	0x010EFF01,	0x021027FF,	0x00000000,	0x07000000,	0x01070042,	0x02402455,	0x00000000,
	0x00000000,	0x00000000,	0x18000A00,	0x00000000,	0x0C000000,	0x01270002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,
	0x18800500,	0x00000000,	0x00000000,	0x0201FF41,	0x02102700,	0x00000000,	0x0F000000,	0x0107FF01,	0x23102755,	0x00000000,
	0x00550107,	0x010EFF01,	0x0E9027FF,	0x00000000,	0x00000000,	0x01070000,	0x00C02455,	0x00000000,	0x00000000,	0x00000000,
	0x18000300,	0x00000000,	0x0D000000,	0x01270002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,	0x18800100,	0x00000000,
	0x0F000000,	0x010EFF41,	0x024024FF,	0x00000000,	0x04000000,	0x0105FF01,	0x034024AA,	0x00000000,	0x00000000,	0x01040000,
	0x00F820E4,	0x00000000,	0x00000000,	0x00000000,	0x1E000000,	0x00000000,	0x00000000,	0x00000000,	0x00F821E4,	0x00000000,
	0x00000000,	0x02010000,	0x00902700,	0x00000000,	0x12000000,	0x01270002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,
	0x18803A00,	0x00000000,	0x18000000,	0x0718FF07,	0x231027FF,	0x00000000,	0x09FF0709,	0x0718FF07,	0x0EF82105,	0x00000000,
	0x11000000,	0x01214402,	0x037821E4,	0x00000000,	0x00000000,	0x81010000,	0x114021E4,	0x00000000,	0x07000000,	0x01015501,
	0x034021FF,	0x00000000,	0x00000000,	0x01010000,	0x074021FF,	0x00000000,	0x00000000,	0x00010000,	0x00B821A4,	0x00000000,
	0x00000000,	0x0101E407,	0x107820E4,	0x00000000,	0x00000000,	0x02090000,	0x00902700,	0x00000000,	0x03000000,	0x01070002,
	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x0000E401,	0x037821E4,	0x00000000,
	0x00000000,	0x00000000,	0x18002B00,	0x00000000,	0x00000000,	0x02090000,	0x00902700,	0x00000000,	0x02000000,	0x01070002,
	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x01000000,	0x00F821E4,	0x00000000,
	0x00000000,	0x00000000,	0x18002600,	0x00000000,	0x00000000,	0x02090000,	0x00902700,	0x00000000,	0x06000000,	0x01070002,
	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800600,	0x00000000,	0x00000000,	0x0201FC41,	0x02702790,	0x00000000,
	0x00000000,	0x01079000,	0x237027E4,	0x00000000,	0x00E40107,	0x0100FC01,	0x0EF02790,	0x00000000,	0x00000000,	0x01070000,
	0x00B821F9,	0x00000000,	0x00000000,	0x00000000,	0x00C021FF,	0x00000000,	0x00000000,	0x00000000,	0x18001D00,	0x00000000,
	0x00000000,	0x02090000,	0x00902700,	0x00000000,	0x0C000000,	0x01270002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,
	0x18800700,	0x00000000,	0x00000000,	0x02019041,	0x02702790,	0x00000000,	0x00000000,	0x01079000,	0x237027E4,	0x00000000,
	0x00E40107,	0x02089001,	0x0EF02790,	0x00000000,	0x00000000,	0x01070000,	0x00B821F9,	0x00000000,	0x00000000,	0x0000FF01,
	0x031027FF,	0x00000000,	0x00000000,	0x01070000,	0x00C02155,	0x00000000,	0x00000000,	0x00000000,	0x18001300,	0x00000000,
	0x00000000,	0x02090000,	0x00902700,	0x00000000,	0x05000000,	0x01070002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,
	0x18800500,	0x00000000,	0x00000000,	0x00009001,	0x02702790,	0x00000000,	0x00000000,	0x01070000,	0x00B821F9,	0x00000000,
	0x00000000,	0x0000FF01,	0x031027FF,	0x00000000,	0x00000000,	0x01070000,	0x00C02155,	0x00000000,	0x00000000,	0x00000000,
	0x18000B00,	0x00000000,	0x00000000,	0x02090000,	0x00902700,	0x00000000,	0x0D000000,	0x01270002,	0x0C086155,	0x00000000,
	0x00000000,	0x06010000,	0x18800700,	0x00000000,	0x00000000,	0x00000000,	0x00F82BE4,	0x00000000,	0x00000000,	0x00000000,
	0x00F82CE4,	0x00000000,	0x00000000,	0x01000000,	0x00F82DE4,	0x00000000,	0x00000000,	0x02000000,	0x00902A00,	0x00000000,
	0x00000000,	0x00000000,	0x1C012600,	0x00000000,	0x00000000,	0x01000000,	0x00F821E4,	0x00000000,	0x00000000,	0x00000000,
	0x18000100,	0x00000000,	0x00000000,	0x0000E401,	0x037821E4,	0x00000000,	0x00000000,	0x01010000,	0x00FA20E4,	0x00000000,
	0x00000000,	0x01000000,	0x00F821E4,	0x00000000,	0x00000000,	0x02010000,	0x00902700,	0x00000000,	0x13000000,	0x01270002,
	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18803B00,	0x00000000,	0x18000000,	0x0718FF07,	0x231027FF,	0x00000000,
	0x0AFF070A,	0x0718FF07,	0x0EF82805,	0x00000000,	0x15000000,	0x01284402,	0x037828E4,	0x00000000,	0x00000000,	0x81080000,
	0x114028E4,	0x00000000,	0x07000000,	0x01085501,	0x034028FF,	0x00000000,	0x00000000,	0x01080000,	0x074028FF,	0x00000000,
	0x00000000,	0x00020000,	0x00B828A4,	0x00000000,	0x01000000,	0x0108E407,	0x107820E4,	0x00000000,	0x00000000,	0x021B0000,
	0x00902700,	0x00000000,	0x03000000,	0x01070002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,
	0x00000000,	0x0101E401,	0x037821E4,	0x00000000,	0x00000000,	0x00000000,	0x18002C00,	0x00000000,	0x00000000,	0x021B0000,
	0x00902700,	0x00000000,	0x02000000,	0x01070002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,
	0x00000000,	0x01000000,	0x00F821E4,	0x00000000,	0x00000000,	0x00000000,	0x18002700,	0x00000000,	0x00000000,	0x021B0000,
	0x00902700,	0x00000000,	0x06000000,	0x01070002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800700,	0x00000000,
	0x00000000,	0x0201FC41,	0x02702290,	0x00000000,	0x01000000,	0x01029001,	0x037022E4,	0x00000000,	0x00000000,	0x01020000,
	0x20B823F9,	0x00000000,	0x00900103,	0x0100FC01,	0x0EF02290,	0x00000000,	0x00000000,	0x01020000,	0x00B821F9,	0x00000000,
	0x00000000,	0x01010000,	0x00C021FF,	0x00000000,	0x00000000,	0x00000000,	0x18001D00,	0x00000000,	0x00000000,	0x021B0000,
	0x00902700,	0x00000000,	0x0C000000,	0x01270002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800700,	0x00000000,
	0x00000000,	0x02019041,	0x02702290,	0x00000000,	0x01000000,	0x01029001,	0x237022E4,	0x00000000,	0x00E40102,	0x02089001,
	0x0EF02290,	0x00000000,	0x00000000,	0x01020000,	0x00B821F9,	0x00000000,	0x00000000,	0x0101FF01,	0x031022FF,	0x00000000,
	0x00000000,	0x01020000,	0x00C02155,	0x00000000,	0x00000000,	0x00000000,	0x18001300,	0x00000000,	0x00000000,	0x021B0000,
	0x00902700,	0x00000000,	0x05000000,	0x01070002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800500,	0x00000000,
	0x00000000,	0x01019001,	0x02702290,	0x00000000,	0x00000000,	0x01020000,	0x00B821F9,	0x00000000,	0x00000000,	0x0101FF01,
	0x031022FF,	0x00000000,	0x00000000,	0x01020000,	0x00C02155,	0x00000000,	0x00000000,	0x00000000,	0x18000B00,	0x00000000,
	0x00000000,	0x021B0000,	0x00902700,	0x00000000,	0x0D000000,	0x01270002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,
	0x18800700,	0x00000000,	0x00000000,	0x00000000,	0x00F82BE4,	0x00000000,	0x00000000,	0x01010000,	0x00F82CE4,	0x00000000,
	0x00000000,	0x01000000,	0x00F82DE4,	0x00000000,	0x00000000,	0x02020000,	0x00902A00,	0x00000000,	0x00000000,	0x00000000,
	0x1C00E800,	0x00000000,	0x00000000,	0x01000000,	0x00F821E4,	0x00000000,	0x00000000,	0x00000000,	0x18000100,	0x00000000,
	0x00000000,	0x0101E401,	0x037821E4,	0x00000000,	0x00000000,	0x01010000,	0x00FA20E4,	0x00000000,	0x00000000,	0x01000000,
	0x00F821E4,	0x00000000,	0x00000000,	0x01010000,	0x00F820E4,	0x00000000,	0x00000000,	0x02010000,	0x00902200,	0x00000000,
	0x17000000,	0x01220002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18801F00,	0x00000000,	0x00000000,	0x023D0000,
	0x00902200,	0x00000000,	0x02000000,	0x01020002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800500,	0x00000000,
	0x03000000,	0x023A0040,	0x02102200,	0x00000000,	0x1C000000,	0x01220002,	0x03102255,	0x00000000,	0x00000000,	0x01020000,
	0x00922255,	0x00000000,	0x00000000,	0x01020000,	0x00882255,	0x00000000,	0x00000000,	0x00000000,	0x18001300,	0x00000000,
	0x00000000,	0x023D0000,	0x00902200,	0x00000000,	0x03000000,	0x01020002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,
	0x18800600,	0x00000000,	0x03000000,	0x42380000,	0x03102200,	0x00000000,	0x16000000,	0x01220002,	0x03102255,	0x00000000,
	0x00000000,	0x01020000,	0x06102255,	0x00000000,	0x00000000,	0x01020000,	0x00922255,	0x00000000,	0x00000000,	0x01020000,
	0x00882255,	0x00000000,	0x00000000,	0x00000000,	0x18000A00,	0x00000000,	0x00000000,	0x023D0000,	0x00902200,	0x00000000,
	0x05000000,	0x01020002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800700,	0x00000000,	0x18000000,	0x42380002,
	0x03102200,	0x00000000,	0x03000000,	0x01020000,	0x03102255,	0x00000000,	0x03000000,	0x01020000,	0x03102255,	0x00000000,
	0x16000000,	0x01220002,	0x03102255,	0x00000000,	0x00000000,	0x01020000,	0x06102255,	0x00000000,	0x00000000,	0x01020000,
	0x00922255,	0x00000000,	0x00000000,	0x01020000,	0x00882255,	0x00000000,	0x02000000,	0x02010041,	0x027823E4,	0x00000000,
	0x1B000000,	0x0123E402,	0x237823E4,	0x00000000,	0x02E40103,	0x01010001,	0x0EF823E4,	0x00000000,	0x00000000,	0x01030000,
	0x00F820E4,	0x00000000,	0x00000000,	0x01000000,	0x00FA10E4,	0x00000000,	0x00000000,	0x00000000,	0x1E000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x3F800000,	0x3F800000,	0x3F800000,	0x3F800000,	0x3F800000,	0x00000000,
	0x00000000,	0x00000000,	0x40000000,	0x00000000,	0x00000000,	0x00000000,	0x3F800000,	0x00000000,	0x00000000,	0x00000000,
	0x40400000,	0x00000000,	0x00000000,	0x00000000,	0x40800000,	0x00000000,	0x00000000,	0x00000000,	0x3F000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x40A00000,	0x00000000,	0x00000000,	0x00000000,
	0x40C00000,	0x00000000,	0x00000000,	0x00000000,	0x40E00000,	0x00000000,	0x00000000,	0x00000000,	0x41000000,	0x00000000,
	0x00000000,	0x00000000,	0x40800000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x3FB8AA3B,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x3F800000,	0x00000000,
	0x3F800000,	0x3F800000,	0x3F800000,	0x00000000,	0x3F800000,	0x3F800000,	0x00000203,	0x00000009,	0x00000009,	0x00000000,
	0x00000004,	0x0000020D,	0x00000009,	0x00000009,	0x00000000,	0x00000008,	0x00000217,	0x0000000A,	0x00000009,	0x00000000,
	0x00000000,	0x00000222,	0x0000000C,	0x00000000,	0x00000000,	0x0000000C,	0x00000000,	0x00000007,	0x00000003,	0x00020001,
	0x000000C4,	0x00000008,	0x00000007,	0x00000003,	0x00020001,	0x000000D4,	0x00000010,	0x0000000B,	0x00000000,	0x00020001,
	0x000000E0,	0x0000001C,	0x00000009,	0x00000000,	0x00020001,	0x000000E4,	0x00000026,	0x00000007,	0x00000000,	0x00020001,
	0x000000E8,	0x0000002E,	0x00000009,	0x00000009,	0x00020001,	0x000000EC,	0x00000038,	0x00000009,	0x00000000,	0x00020001,
	0x000000F0,	0x00000042,	0x00000008,	0x00000001,	0x00020001,	0x000000F4,	0x0000004B,	0x0000000A,	0x00000002,	0x00020001,
	0x000000DC,	0x0000007D,	0x0000000F,	0x00000009,	0x00020001,	0x00000020,	0x0000008D,	0x0000000E,	0x00000001,	0x00020001,
	0x00000024,	0x0000009C,	0x00000014,	0x00000001,	0x00020001,	0x00000028,	0x000000B1,	0x00000016,	0x00000001,	0x00020001,
	0x0000002C,	0x00000118,	0x00000012,	0x00000000,	0x00020001,	0x00000060,	0x0000012B,	0x00000014,	0x00000000,	0x00020001,
	0x00000064,	0x00000140,	0x0000000F,	0x00000009,	0x00020001,	0x00000068,	0x00000150,	0x0000000E,	0x00000001,	0x00020001,
	0x0000006C,	0x0000015F,	0x00000014,	0x00000001,	0x00020001,	0x00000070,	0x00000174,	0x00000016,	0x00000001,	0x00020001,
	0x00000074,	0x000001DB,	0x00000012,	0x00000000,	0x00020001,	0x000000A8,	0x000001EE,	0x00000014,	0x00000000,	0x00020001,
	0x000000AC,	0x00000056,	0x0000000A,	0x0000000F,	0x00030005,	0x00000000,	0x00000061,	0x0000000A,	0x0000000F,	0x00030005,
	0x00000004,	0x0000006C,	0x00000010,	0x00000002,	0x00020001,	0x000000C8,	0x00000002,	0x00000004,	0x000000C8,	0x00000010,
	0x00000001,	0x00020001,	0x00000030,	0x00000003,	0x00000004,	0x000000D9,	0x00000012,	0x00000001,	0x00020001,	0x0000003C,
	0x00000003,	0x00000004,	0x000000EC,	0x00000014,	0x00000001,	0x00020001,	0x00000048,	0x00000003,	0x00000004,	0x00000101,
	0x00000016,	0x00000001,	0x00020001,	0x00000054,	0x00000003,	0x00000004,	0x0000018B,	0x00000010,	0x00000001,	0x00020001,
	0x00000078,	0x00000003,	0x00000004,	0x0000019C,	0x00000012,	0x00000001,	0x00020001,	0x00000084,	0x00000003,	0x00000004,
	0x000001AF,	0x00000014,	0x00000001,	0x00020001,	0x00000090,	0x00000003,	0x00000004,	0x000001C4,	0x00000016,	0x00000001,
	0x00020001,	0x0000009C,	0x00000003,	0x00000004,	0x44786554,	0x00306D69,	0x44786554,	0x00316D69,	0x2E676F46,	0x736E6564,
	0x00797469,	0x2E676F46,	0x72617473,	0x6F460074,	0x6E652E67,	0x6F460064,	0x6F632E67,	0x00726F6C,	0x2E676F46,	0x6C616373,
	0x6F460065,	0x6F6D2E67,	0x46006564,	0x6E45676F,	0x656C6261,	0x65540064,	0x616D4978,	0x30736567,	0x78655400,	0x67616D49,
	0x00317365,	0x74786554,	0x32657275,	0x616E4544,	0x64656C62,	0x78655400,	0x5B766E45,	0x632E5D30,	0x726F6C6F,	0x78655400,
	0x5B766E45,	0x6D2E5D30,	0x0065646F,	0x45786554,	0x305B766E,	0x6F632E5D,	0x6E69626D,	0x62675265,	0x78655400,	0x5B766E45,
	0x632E5D30,	0x69626D6F,	0x6C41656E,	0x00616870,	0x45786554,	0x305B766E,	0x72732E5D,	0x62675263,	0x78655400,	0x5B766E45,
	0x732E5D30,	0x6C416372,	0x00616870,	0x45786554,	0x305B766E,	0x706F2E5D,	0x6E617265,	0x62675264,	0x78655400,	0x5B766E45,
	0x6F2E5D30,	0x61726570,	0x6C41646E,	0x00616870,	0x45786554,	0x305B766E,	0x67722E5D,	0x61635362,	0x5400656C,	0x6E457865,
	0x5D305B76,	0x706C612E,	0x63536168,	0x00656C61,	0x45786554,	0x315B766E,	0x6F632E5D,	0x00726F6C,	0x45786554,	0x315B766E,
	0x6F6D2E5D,	0x54006564,	0x6E457865,	0x5D315B76,	0x6D6F632E,	0x656E6962,	0x00626752,	0x45786554,	0x315B766E,	0x6F632E5D,
	0x6E69626D,	0x706C4165,	0x54006168,	0x6E457865,	0x5D315B76,	0x6372732E,	0x00626752,	0x45786554,	0x315B766E,	0x72732E5D,
	0x706C4163,	0x54006168,	0x6E457865,	0x5D315B76,	0x65706F2E,	0x646E6172,	0x00626752,	0x45786554,	0x315B766E,	0x706F2E5D,
	0x6E617265,	0x706C4164,	0x54006168,	0x6E457865,	0x5D315B76,	0x6267722E,	0x6C616353,	0x65540065,	0x766E4578,	0x2E5D315B,
	0x68706C61,	0x61635361,	0x5400656C,	0x6F437865,	0x3064726F,	0x78655400,	0x726F6F43,	0x46003164,	0x746E6F72,	0x6F6C6F43,
	0x6F460072,	0x61724667,	0x6F6F4367,	0x00006472,};

//checksum generated by simpleCheckSum()
static const unsigned int UniversalFragCheckSum = 252;

static const char* UniversalFragText = 
	"//#ifdef GL_ES\n"
	"precision highp float;\n"
	"//#endif\n"
	"\n"
	"#define TEX_ENV_MODE_REPLACE                             1\n"
	"#define TEX_ENV_MODE_MODULATE                            2    \n"
	"#define TEX_ENV_MODE_ADD                                 3\n"
	"#define TEX_ENV_MODE_DECAL                               4\n"
	"#define TEX_ENV_MODE_BLEND                               5\n"
	"#define TEX_ENV_MODE_COMBINE                             6\n"
	"\n"
	"#define TEX_COMBINE_RGB_REPLACE         1\n"
	"#define TEX_COMBINE_RGB_MODULATE        2\n"
	"#define TEX_COMBINE_RGB_ADD             3\n"
	"#define TEX_COMBINE_RGB_ADD_SIGNED      4\n"
	"#define TEX_COMBINE_RGB_INTERPOLATE     5\n"
	"#define TEX_COMBINE_RGB_SUBTRACT        6\n"
	"#define TEX_COMBINE_RGB_DOT3_RGB        7\n"
	"#define TEX_COMBINE_RGB_DOT3_RGBA       8\n"
	"\n"
	"#define TEX_COMBINE_ALPHA_REPLACE               1\n"
	"#define TEX_COMBINE_ALPHA_MODULATE              2\n"
	"#define TEX_COMBINE_ALPHA_ADD                   3\n"
	"#define TEX_COMBINE_ALPHA_ADD_SIGNED            4\n"
	"#define TEX_COMBINE_ALPHA_INTERPOLATE           5\n"
	"#define TEX_COMBINE_ALPHA_SUBTRACT              6\n"
	"\n"
	"#define TEX_ENV_COMBINER_SRC_TEXTURE            1\n"
	"#define TEX_ENV_COMBINER_SRC_CONSTANT           2\n"
	"#define TEX_ENV_COMBINER_SRC_PRIMARY_COLOR      3\n"
	"#define TEX_ENV_COMBINER_SRC_PREVIOUS           4\n"
	"\n"
	"#define TEX_ENV_COMBINER_RGB_OP_SRC_COLOR               1\n"
	"#define TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_COLOR     2\n"
	"#define TEX_ENV_COMBINER_RGB_OP_SRC_ALPHA               3\n"
	"#define TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_ALPHA     4\n"
	"\n"
	"#define TEX_ENV_COMBINER_ALPHA_OP_SRC_ALPHA             1\n"
	"#define TEX_ENV_COMBINER_ALPHA_OP_ONE_MINUS_SRC_ALPHA   2\n"
	"\n"
	"#define FOGMODE_LINEAR 1\n"
	"#define FOGMODE_EXP    2\n"
	"#define FOGMODE_EXP2   3\n"
	"\n"
	"#define LOG2E 1.442695 // 1 / log(2)\n"
	"\n"
	"const int MaxTextureCoords = 2;\n"
	"const int MaxTextureImageUnits = 2;\n"
	"\n"
	"struct FogParameters\n"
	"{\n"
	"    float density;\n"
	"    float start;\n"
	"    float end;\n"
	"    vec4 color;\n"
	"    float scale; // Derived: 1.0 / (end - start)\n"
	"    int mode;\n"
	"};\n"
	"\n"
	"struct _TexEnv\n"
	"{\n"
	"    vec4 color;\n"
	"    int mode;\n"
	"    \n"
	"    int combineRgb;\n"
	"    int combineAlpha;\n"
	"    \n"
	"    int srcRgb[3];\n"
	"    int srcAlpha[3];\n"
	"    \n"
	"    int operandRgb[3];\n"
	"    int operandAlpha[3];\n"
	"    \n"
	"    float rgbScale;\n"
	"    float alphaScale;\n"
	"};\n"
	"\n"
	"uniform FogParameters Fog;\n"
	"uniform bool          FogEnabled;\n"
	"uniform sampler2D     TexImages0;\n"
	"uniform sampler2D     TexImages1;\n"
	"uniform bool          Texture2DEnabled[2];\n"
	"uniform _TexEnv       TexEnv[2];\n"
	"\n"
	"varying vec4  TexCoord0;\n"
	"varying vec4  TexCoord1;\n"
	"varying vec4  FrontColor;\n"
	"varying float FogFragCoord;\n"
	"\n"
	"\n"
	"\n"
	"\n"
	"vec4 tex_env_combiner(vec4 fragColor, vec4 prevColor, vec4 srcColor, int nth);\n"
	"\n"
	"vec4 tex_arg_calculation(vec4 fragColor, vec4 prevColor, vec4 srcColor, vec4 EnvColor, int srcrgb, int opndrgb, int srcAlpha, int operandAlpha);\n"
	"vec4 tex_arg_calculation(vec4 fragColor, vec4 prevColor, vec4 srcColor, vec4 EnvColor, int srcrgb, int opndrgb, int srcAlpha, int operandAlpha)\n"
	"{\n"
	"    vec4 temp;\n"
	"        if((srcrgb) == TEX_ENV_COMBINER_SRC_TEXTURE)\n"
	"        {\n"
	"            if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_SRC_COLOR)\n"
	"                temp.rgb = srcColor.rgb;\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_COLOR)\n"
	"                temp.rgb = 1.0 - srcColor.rgb;\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_SRC_ALPHA)\n"
	"                temp.rgb = vec3(srcColor.a);\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_ALPHA)\n"
	"                temp.rgb = vec3(1.0 - srcColor.a);\n"
	"        }\n"
	"        else if((srcrgb) == TEX_ENV_COMBINER_SRC_CONSTANT)\n"
	"        {\n"
	"            if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_SRC_COLOR)\n"
	"                temp.rgb = EnvColor.rgb;\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_COLOR)\n"
	"                temp.rgb = 1.0 - EnvColor.rgb;\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_SRC_ALPHA)\n"
	"                temp.rgb = vec3(EnvColor.a);\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_ALPHA)\n"
	"                temp.rgb = vec3(1.0 - EnvColor.a);\n"
	"        }\n"
	"        else if((srcrgb) == TEX_ENV_COMBINER_SRC_PRIMARY_COLOR)\n"
	"        {\n"
	"            if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_SRC_COLOR)\n"
	"                temp.rgb = fragColor.rgb;\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_COLOR)\n"
	"                temp.rgb = 1.0 - fragColor.rgb;\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_SRC_ALPHA)\n"
	"                temp.rgb = vec3(fragColor.a);\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_ALPHA)\n"
	"                temp.rgb = vec3(1.0 - fragColor.a);\n"
	"        }\n"
	"        else if((srcrgb) == TEX_ENV_COMBINER_SRC_PREVIOUS)\n"
	"        {\n"
	"            if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_SRC_COLOR)\n"
	"                temp.rgb = prevColor.rgb;\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_COLOR)\n"
	"                temp.rgb = 1.0 - prevColor.rgb;\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_SRC_ALPHA)\n"
	"                temp.rgb = vec3(prevColor.a);\n"
	"            else if((opndrgb) == TEX_ENV_COMBINER_RGB_OP_ONE_MINUS_SRC_ALPHA)\n"
	"                temp.rgb = vec3(1.0 - prevColor.a);\n"
	"        }\n"
	"        \n"
	"        //\n"
	"        // COMBINE_ALPHA\n"
	"        //\n"
	"        if((srcAlpha) == TEX_ENV_COMBINER_SRC_TEXTURE)\n"
	"        {\n"
	"            if((operandAlpha) == TEX_ENV_COMBINER_ALPHA_OP_SRC_ALPHA)\n"
	"                temp.a = srcColor.a;\n"
	"            else if((operandAlpha) == TEX_ENV_COMBINER_ALPHA_OP_ONE_MINUS_SRC_ALPHA)\n"
	"                temp.a = 1.0 - srcColor.a;\n"
	"        }\n"
	"        else if((srcAlpha) == TEX_ENV_COMBINER_SRC_CONSTANT)\n"
	"        {\n"
	"            if((operandAlpha) == TEX_ENV_COMBINER_ALPHA_OP_SRC_ALPHA)\n"
	"                temp.a = EnvColor.a;\n"
	"            else if((operandAlpha) == TEX_ENV_COMBINER_ALPHA_OP_ONE_MINUS_SRC_ALPHA)\n"
	"                temp.a = 1.0 - EnvColor.a;\n"
	"        }\n"
	"        else if((srcAlpha) == TEX_ENV_COMBINER_SRC_PRIMARY_COLOR)\n"
	"        {\n"
	"            if((operandAlpha) == TEX_ENV_COMBINER_ALPHA_OP_SRC_ALPHA)\n"
	"                temp.a = fragColor.a;\n"
	"            else if((operandAlpha) == TEX_ENV_COMBINER_ALPHA_OP_ONE_MINUS_SRC_ALPHA)\n"
	"                temp.a = 1.0 - fragColor.a;\n"
	"        }\n"
	"        else if((srcAlpha) == TEX_ENV_COMBINER_SRC_PREVIOUS)\n"
	"        {\n"
	"            if((operandAlpha) == TEX_ENV_COMBINER_ALPHA_OP_SRC_ALPHA)\n"
	"                temp.a = prevColor.a;\n"
	"            else if((operandAlpha) == TEX_ENV_COMBINER_ALPHA_OP_ONE_MINUS_SRC_ALPHA)\n"
	"                temp.a = 1.0 - prevColor.a;\n"
	"        }\n"
	"    return temp;\n"
	"}\n"
	"vec4 tex_env_combiner(vec4 fragColor, vec4 prevColor, vec4 srcColor, int nth)\n"
	"{\n"
	"    int i;\n"
	"    vec4 arg[3], c;\n"
	"    //vec4 temp;\n"
	"     int srcrgb, opndrgb,srcAlpha, operandAlpha;\n"
	"    vec4 EnvColor;\n"
	"    float rgbScale, alphaScale;\n"
	"    int combrgb, combalpha;\n"
	"    \n"
	"    if (nth == 0)\n"
	"    {\n"
	"            srcrgb = TexEnv[0].srcRgb[0];\n"
	"            opndrgb = TexEnv[0].operandRgb[0];\n"
	"            srcAlpha = TexEnv[0].srcAlpha[0];\n"
	"            operandAlpha = TexEnv[0].operandAlpha[0];\n"
	"            EnvColor = TexEnv[0].color;\n"
	"            rgbScale = TexEnv[0].rgbScale;\n"
	"            alphaScale = TexEnv[0].alphaScale;\n"
	"            combrgb = TexEnv[0].combineRgb;\n"
	"            combalpha = TexEnv[0].combineAlpha;\n"
	"    }\n"
	"    else if (nth == 1)\n"
	"    {\n"
	"            srcrgb = TexEnv[1].srcRgb[0];\n"
	"            opndrgb = TexEnv[1].operandRgb[0];\n"
	"            srcAlpha = TexEnv[1].srcAlpha[0];\n"
	"            operandAlpha = TexEnv[1].operandAlpha[0];\n"
	"             EnvColor = TexEnv[1].color;\n"
	"            rgbScale = TexEnv[1].rgbScale;\n"
	"            alphaScale = TexEnv[1].alphaScale;\n"
	"            combrgb = TexEnv[1].combineRgb;\n"
	"            combalpha = TexEnv[1].combineAlpha;\n"
	"    }\n"
	"    arg[0] = tex_arg_calculation (fragColor,prevColor,srcColor,EnvColor, srcrgb, opndrgb, srcAlpha, operandAlpha);\n"
	"    \n"
	"    if (nth == 0)\n"
	"    {\n"
	"            srcrgb = TexEnv[0].srcRgb[1];\n"
	"            opndrgb = TexEnv[0].operandRgb[1];\n"
	"            srcAlpha = TexEnv[0].srcAlpha[1];\n"
	"            operandAlpha = TexEnv[0].operandAlpha[1];\n"
	"    }\n"
	"    else if (nth == 1)\n"
	"    {\n"
	"            srcrgb = TexEnv[1].srcRgb[1];\n"
	"            opndrgb = TexEnv[1].operandRgb[1];\n"
	"            srcAlpha = TexEnv[1].srcAlpha[1];\n"
	"            operandAlpha = TexEnv[1].operandAlpha[1];\n"
	"    }\n"
	"    \n"
	"    arg[1] = tex_arg_calculation (fragColor,prevColor,srcColor,EnvColor, srcrgb, opndrgb, srcAlpha, operandAlpha);\n"
	"    \n"
	"    if (nth == 0)\n"
	"    {\n"
	"            srcrgb = TexEnv[0].srcRgb[2];\n"
	"            opndrgb = TexEnv[0].operandRgb[2];\n"
	"            srcAlpha = TexEnv[0].srcAlpha[2];\n"
	"            operandAlpha = TexEnv[0].operandAlpha[2];\n"
	"    }\n"
	"    else if (nth == 1)\n"
	"    {\n"
	"            srcrgb = TexEnv[1].srcRgb[2];\n"
	"            opndrgb = TexEnv[1].operandRgb[2];\n"
	"            srcAlpha = TexEnv[1].srcAlpha[2];\n"
	"            operandAlpha = TexEnv[1].operandAlpha[2];\n"
	"    }\n"
	"    \n"
	"    arg[2] = tex_arg_calculation (fragColor,prevColor,srcColor,EnvColor, srcrgb, opndrgb, srcAlpha, operandAlpha);\n"
	"\n"
	"    //\n"
	"    // COMBINE\n"
	"    //\n"
	"    \n"
	"    if(combrgb == TEX_COMBINE_RGB_REPLACE)\n"
	"        c.rgb = arg[0].rgb;\n"
	"    else if(combrgb == TEX_COMBINE_RGB_MODULATE)\n"
	"        c.rgb = arg[0].rgb * arg[1].rgb;\n"
	"    else if(combrgb == TEX_COMBINE_RGB_ADD)\n"
	"        c.rgb = arg[0].rgb + arg[1].rgb;\n"
	"    else if(combrgb == TEX_COMBINE_RGB_ADD_SIGNED)\n"
	"        c.rgb = arg[0].rgb + arg[1].rgb - 0.5;\n"
	"    else if(combrgb == TEX_COMBINE_RGB_INTERPOLATE)\n"
	"        c.rgb = mix(arg[1].rgb, arg[0].rgb, arg[2].rgb);\n"
	"    else if(combrgb == TEX_COMBINE_RGB_SUBTRACT)\n"
	"        c.rgb = arg[0].rgb - arg[1].rgb;\n"
	"    else if(combrgb == TEX_COMBINE_RGB_DOT3_RGB ||\n"
	"        combrgb == TEX_COMBINE_RGB_DOT3_RGBA)\n"
	"    {\n"
	"        float d;\n"
	"        \n"
	"        d = 4.0 *((arg[0].r - 0.5)*(arg[1].r - 0.5) + (arg[0].g - 0.5)*(arg[1].g - 0.5) + (arg[0].b - 0.5)*(arg[1].b - 0.5));\n"
	"        c = vec4(d);\n"
	"    }\n"
	"    \n"
	"   c.rgb = rgbScale * c.rgb;\n"
	"    \n"
	"    if (combrgb != TEX_COMBINE_RGB_DOT3_RGBA)\n"
	"    {\n"
	"            if(combalpha == TEX_COMBINE_ALPHA_REPLACE)\n"
	"                c.a = arg[0].a;\n"
	"            else if(combalpha == TEX_COMBINE_ALPHA_MODULATE)\n"
	"                c.a = arg[0].a * arg[1].a;\n"
	"            else if(combalpha == TEX_COMBINE_ALPHA_ADD)\n"
	"                c.a = arg[0].a + arg[1].a;\n"
	"            else if(combalpha == TEX_COMBINE_ALPHA_ADD_SIGNED)\n"
	"                c.a = arg[0].a + arg[1].a - 0.5;\n"
	"            else if(combalpha == TEX_COMBINE_ALPHA_INTERPOLATE)\n"
	"                c.a = mix(arg[1].a, arg[0].a, arg[2].a);\n"
	"            else if(combalpha == TEX_COMBINE_ALPHA_SUBTRACT)\n"
	"                c.a = arg[0].a - arg[1].a;\n"
	"    }\n"
	"    \n"
	"    c.a = alphaScale * c.a;\n"
	"    \n"
	"    return c;\n"
	"}\n"
	"\n"
	"\n"
	"void main( void )\n"
	"{\n"
	"    vec4 fragColor;  \n"
	"    vec4 prevColor, srcColor;\n"
	"    \n"
	"    fragColor = FrontColor;\n"
	"    prevColor = fragColor;\n"
	"\n"
	"        if(Texture2DEnabled[0])\n"
	"        {\n"
	"            srcColor = texture2D(TexImages0, TexCoord0.xy);\n"
	"            int mode = (TexEnv[0].mode);\n"
	"            if(mode == TEX_ENV_MODE_MODULATE)\n"
	"                prevColor *= srcColor;\n"
	"            else if(mode == TEX_ENV_MODE_REPLACE)\n"
	"                prevColor = srcColor;\n"
	"            else if(mode == TEX_ENV_MODE_DECAL)\n"
	"                prevColor = vec4(mix(prevColor.rgb, srcColor.rgb, srcColor.a), prevColor.a);\n"
	"            else if(mode == TEX_ENV_MODE_BLEND)\n"
	"                prevColor = vec4(mix(prevColor.rgb, TexEnv[0].color.rgb, srcColor.rgb), prevColor.a * srcColor.a);\n"
	"            else if(mode == TEX_ENV_MODE_ADD)\n"
	"                prevColor = vec4(prevColor.rgb + srcColor.rgb, prevColor.a * srcColor.a);\n"
	"            else if(mode == TEX_ENV_MODE_COMBINE)\n"
	"                prevColor = tex_env_combiner(fragColor, prevColor, srcColor, 0);\n"
	"            else prevColor *= srcColor;\n"
	"            \n"
	"            prevColor = clamp(prevColor, 0.0, 1.0);\n"
	"        }\n"
	"\n"
	"        if(Texture2DEnabled[1])\n"
	"        {\n"
	"            srcColor = texture2D(TexImages1, TexCoord1.xy);\n"
	"            int mode = (TexEnv[1].mode);\n"
	"            if(mode == TEX_ENV_MODE_MODULATE)\n"
	"                prevColor *= srcColor;\n"
	"            else if(mode == TEX_ENV_MODE_REPLACE)\n"
	"                prevColor = srcColor;\n"
	"            else if(mode == TEX_ENV_MODE_DECAL)\n"
	"                prevColor = vec4(mix(prevColor.rgb, srcColor.rgb, srcColor.a), prevColor.a);\n"
	"            else if(mode == TEX_ENV_MODE_BLEND)\n"
	"                prevColor = vec4(mix(prevColor.rgb, TexEnv[0].color.rgb, srcColor.rgb), prevColor.a * srcColor.a);\n"
	"            else if(mode == TEX_ENV_MODE_ADD)\n"
	"                prevColor = vec4(prevColor.rgb + srcColor.rgb, prevColor.a * srcColor.a);\n"
	"            else if(mode == TEX_ENV_MODE_COMBINE)\n"
	"                prevColor = tex_env_combiner(fragColor, prevColor, srcColor, 1);\n"
	"            else prevColor *= srcColor;\n"
	"            \n"
	"            prevColor = clamp(prevColor, 0.0, 1.0);\n"
	"        }\n"
	"      \n"
	"    fragColor = prevColor;\n"
	"\n"
	"\n"
	"    if(FogEnabled)\n"
	"    {\n"
	"        float fog;\n"
	"        \n"
	"        if((Fog.mode) == FOGMODE_LINEAR)\n"
	"        {\n"
	"            // f= (end - z) * (end - start)\n"
	"            fog = clamp((Fog.end - FogFragCoord) * Fog.scale, 0.0, 1.0);\n"
	"        }\n"
	"        else if((Fog.mode) == FOGMODE_EXP)\n"
	"        {\n"
	"            // f = e^(-density * z)\n"
	"            fog = clamp(exp2(-Fog.density * FogFragCoord * LOG2E), 0.0, 1.0);\n"
	"        }\n"
	"        else if((Fog.mode) == FOGMODE_EXP2)\n"
	"        {\n"
	"            // f = e^(-(density * z)^2)\n"
	"            fog = clamp(exp2(-Fog.density * Fog.density * FogFragCoord * FogFragCoord * LOG2E), 0.0, 1.0);\n"
	"        }\n"
	"        fragColor = mix(Fog.color, fragColor, fog);\n"
	"    }\n"
	"    \n"
	"    //=========================================\n"
	"    gl_FragColor = fragColor;\n"
	"}\n"
	"";

#ifdef GL_HELPERS_INCLUDED
//glHelpers.h must be included BEFORE any of the shader header files. Also make sure you have the latest version of glHelpers.h
static ghShader UniversalFragShader(UniversalFragText, UniversalFrag, UniversalFragLength, UniversalFragCheckSum);


#endif


#endif //_UniversalFrag_h_
