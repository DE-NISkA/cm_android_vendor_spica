#ifndef _FogFrag_h_
#define _FogFrag_h_


// Header generated from binary by WriteAsBinHeader()..
static const int FogFragLength = 321;
static const unsigned int FogFrag[FogFragLength]={
	0x20205350,	0xFFFF0008,	0x00000048,	0x01020000,	0x00000028,	0x0000000F,	0x00000000,	0x00000000,	0x00000003,	0x00000000,
	0x00000007,	0x00000001,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000070,	0x00000000,	0x18000000,	0x0718FF07,
	0x231020FF,	0x00000000,	0x08FF0708,	0x0718FF07,	0x0EF82205,	0x00000000,	0x02000000,	0x01024402,	0x037822E4,	0x00000000,
	0x00000000,	0x81020000,	0x114022E4,	0x00000000,	0x00000000,	0x01025501,	0x034022FF,	0x00000000,	0x00000000,	0x01020000,
	0x074022FF,	0x00000000,	0x00000000,	0x00000000,	0x00B822A4,	0x00000000,	0x00000000,	0x0102E407,	0x107822E4,	0x00000000,
	0x01000000,	0x0102E400,	0x037821E4,	0x00000000,	0x00000000,	0x02090000,	0x00902000,	0x00000000,	0x03000000,	0x01000002,
	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800500,	0x00000000,	0x02000000,	0x02060040,	0x02102000,	0x00000000,
	0x08000000,	0x01000002,	0x03102055,	0x00000000,	0x00000000,	0x01000000,	0x00922055,	0x00000000,	0x00000000,	0x01000000,
	0x00882055,	0x00000000,	0x00000000,	0x00000000,	0x18001300,	0x00000000,	0x00000000,	0x02090000,	0x00902000,	0x00000000,
	0x0C000000,	0x01000002,	0x0C086155,	0x00000000,	0x00000000,	0x06010000,	0x18800600,	0x00000000,	0x02000000,	0x42040000,
	0x03102000,	0x00000000,	0x0D000000,	0x01000002,	0x03102055,	0x00000000,	0x00000000,	0x01000000,	0x06102055,	0x00000000,
	0x00000000,	0x01000000,	0x00922055,	0x00000000,	0x00000000,	0x01000000,	0x00882055,	0x00000000,	0x00000000,	0x00000000,
	0x18000A00,	0x00000000,	0x00000000,	0x02090000,	0x00902000,	0x00000000,	0x0E000000,	0x01000002,	0x0C086155,	0x00000000,
	0x00000000,	0x06010000,	0x18800700,	0x00000000,	0x04000000,	0x42040002,	0x03102000,	0x00000000,	0x02000000,	0x01000000,
	0x03102055,	0x00000000,	0x02000000,	0x01000000,	0x03102055,	0x00000000,	0x0D000000,	0x01000002,	0x03102055,	0x00000000,
	0x00000000,	0x01000000,	0x06102055,	0x00000000,	0x00000000,	0x01000000,	0x00922055,	0x00000000,	0x00000000,	0x01000000,
	0x00882055,	0x00000000,	0x00000000,	0x02010041,	0x027822E4,	0x00000000,	0x07000000,	0x0102E402,	0x237822E4,	0x00000000,
	0x00E40102,	0x01010001,	0x0EFA10E4,	0x00000000,	0x00000000,	0x00000000,	0x1E000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x3F800000,	0x3F800000,	0x3F800000,	0x3F800000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x3F800000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x3F800000,	0x00000000,	0x00000000,	0x00000000,	0x40000000,	0x00000000,	0x00000000,	0x00000000,
	0x3FB8AA3B,	0x00000000,	0x00000000,	0x00000000,	0x40400000,	0x00000000,	0x00000000,	0x00000000,	0x00000013,	0x00000009,
	0x00000009,	0x00000000,	0x00000000,	0x0000001D,	0x0000000A,	0x00000009,	0x00000000,	0x00000004,	0x00000028,	0x0000000C,
	0x00000000,	0x00000000,	0x00000008,	0x00000000,	0x00000007,	0x00000003,	0x00020001,	0x00000008,	0x00000035,	0x0000000B,
	0x00000000,	0x00020001,	0x00000010,	0x00000041,	0x00000009,	0x00000000,	0x00020001,	0x00000014,	0x0000004B,	0x00000007,
	0x00000000,	0x00020001,	0x00000018,	0x00000053,	0x00000009,	0x00000009,	0x00020001,	0x0000001C,	0x0000005D,	0x00000009,
	0x00000000,	0x00020001,	0x00000020,	0x00000067,	0x00000008,	0x00000001,	0x00020001,	0x00000024,	0x00000008,	0x0000000A,
	0x0000000F,	0x00030005,	0x00000000,	0x44786554,	0x00306D69,	0x49786554,	0x6567616D,	0x54003073,	0x6F437865,	0x3064726F,
	0x6F724600,	0x6F43746E,	0x00726F6C,	0x46676F46,	0x43676172,	0x64726F6F,	0x676F4600,	0x6E65642E,	0x79746973,	0x676F4600,
	0x6174732E,	0x46007472,	0x652E676F,	0x4600646E,	0x632E676F,	0x726F6C6F,	0x676F4600,	0x6163732E,	0x4600656C,	0x6D2E676F,
	0x0065646F,};

//checksum generated by simpleCheckSum()
static const unsigned int FogFragCheckSum = 16;

static const char* FogFragText = 
	"#ifdef GL_ES\n"
	"precision highp float;\n"
	"#endif\n"
	"\n"
	"uniform sampler2D TexImages0;\n"
	"\n"
	"varying vec4 TexCoord0;\n"
	"varying vec4 FrontColor;\n"
	"varying float FogFragCoord;\n"
	"\n"
	"#define FOGMODE_LINEAR 1\n"
	"#define FOGMODE_EXP 2\n"
	"#define FOGMODE_EXP2 3\n"
	"\n"
	"#define LOG2E 1.442695 // 1 / log(2)\n"
	"\n"
	"struct FogParameters\n"
	"{\n"
	"    float density;\n"
	"    float start;\n"
	"    float end;\n"
	"    vec4 color;\n"
	"    float scale; // Derived: 1.0 / (end - start)\n"
	"    int mode;\n"
	"};\n"
	"\n"
	"uniform FogParameters Fog;\n"
	"\n"
	"void main()\n"
	"{\n"
	"    float fog;\n"
	"    vec4 fragColor = texture2D(TexImages0, TexCoord0.xy) * FrontColor;\n"
	"\n"
	"    if((Fog.mode) == FOGMODE_LINEAR)\n"
	"    {\n"
	"        // f= (end - z) * (end - start)\n"
	"        fog = clamp((Fog.end - FogFragCoord) * Fog.scale, 0.0, 1.0);\n"
	"    }\n"
	"    else if((Fog.mode) == FOGMODE_EXP)\n"
	"    {\n"
	"        // f = e^(-density * z)\n"
	"        fog = clamp(exp2(-Fog.density * FogFragCoord * LOG2E), 0.0, 1.0);\n"
	"    }\n"
	"    else if((Fog.mode) == FOGMODE_EXP2)\n"
	"    {\n"
	"        // f = e^(-(density * z)^2)\n"
	"        fog = clamp(exp2(-Fog.density * Fog.density * FogFragCoord * FogFragCoord * LOG2E), 0.0, 1.0);\n"
	"    }\n"
	"\n"
	"    gl_FragColor = mix(Fog.color, fragColor, fog);\n"
	"}";

#ifdef GL_HELPERS_INCLUDED
//glHelpers.h must be included BEFORE any of the shader header files. Also make sure you have the latest version of glHelpers.h
static ghShader FogFragShader(FogFragText, FogFrag, FogFragLength, FogFragCheckSum);


#endif


#endif //_FogFrag_h_
