#ifndef _n8Vert_h_
#define _n8Vert_h_


// Header generated from binary by WriteAsBinHeader()..
static const int n8VertLength = 2657;
static const unsigned int n8Vert[n8VertLength]={
	0x20205356,	0xFFFF0008,	0x00000048,	0x01020000,	0x000000A2,	0x0000008B,	0x00000000,	0x00000000,	0x00000004,	0x00000003,
	0x00000073,	0x00000000,	0x00000000,	0x00000000,	0x00000001,	0x00000000,	0x00000CC5,	0x00000073,	0x1D000000,	0x01000002,
	0x03402600,	0x00000000,	0x00000000,	0x01060000,	0x010880FF,	0x00000000,	0x02000000,	0x2222A441,	0x023827A4,	0x00000000,
	0x07000000,	0x0107A401,	0x040825A4,	0x00000000,	0x00000000,	0x01050000,	0x08882500,	0x00000000,	0x07000000,	0x0105A401,
	0x03382500,	0x00000000,	0x07000000,	0x0107A401,	0x044027A4,	0x00000000,	0x00000000,	0x01070000,	0x08C025FF,	0x00000000,
	0x00000000,	0x01050000,	0x084025FF,	0x00000000,	0x09000000,	0x0185A402,	0x023827A4,	0x00000000,	0x07000000,	0x0107A401,
	0x040828A4,	0x00000000,	0x00000000,	0x01080000,	0x08882800,	0x00000000,	0x07000000,	0x0108A401,	0x03382800,	0x00000000,
	0x05000000,	0x0100A401,	0x044028F9,	0x00000000,	0x00000000,	0x01080000,	0x00A026FF,	0x00000000,	0x08000000,	0x0100A401,
	0x044028F9,	0x00000000,	0x00000000,	0x01080000,	0x008826FF,	0x00000000,	0x00000000,	0x021A0000,	0x00902600,	0x00000000,
	0x00000000,	0x00000000,	0x1C004F00,	0x00000000,	0x1D000000,	0x01000002,	0x03082700,	0x00000000,	0x00000000,	0x01070000,
	0x01108000,	0x00000000,	0x04000000,	0x6125A40A,	0x040826A4,	0x00000000,	0x1D000000,	0x01000002,	0x03082700,	0x00000000,
	0x00000000,	0x01070000,	0x01088000,	0x00000000,	0x00000000,	0x22260000,	0x00882700,	0x00000000,	0x0A000000,	0x01870002,
	0x0C886100,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x02880000,	0x00882700,	0x00000000,
	0x00000000,	0x00000000,	0x18000C00,	0x00000000,	0x1D000000,	0x01000002,	0x03082700,	0x00000000,	0x00000000,	0x01070000,
	0x01088000,	0x00000000,	0x06000000,	0x22270001,	0x0D086100,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,
	0x00000000,	0x02870000,	0x00882700,	0x00000000,	0x00000000,	0x00000000,	0x18000600,	0x00000000,	0x1D000000,	0x01000002,
	0x03402700,	0x00000000,	0x00000000,	0x01060000,	0x07082600,	0x00000000,	0x00000000,	0x01070000,	0x010880FF,	0x00000000,
	0x06000000,	0x22250001,	0x03082600,	0x00000000,	0x00000000,	0x01060000,	0x06082600,	0x00000000,	0x00000000,	0x01060000,
	0x00882700,	0x00000000,	0x1D000000,	0x01000002,	0x03402700,	0x00000000,	0x1D000000,	0x01000002,	0x03082800,	0x00000000,
	0x00000000,	0x01080000,	0x01108000,	0x00000000,	0x09000000,	0x2125000A,	0x030828FF,	0x00000000,	0x00000000,	0x01070000,
	0x010880FF,	0x00000000,	0x08000000,	0x22280001,	0x02082800,	0x00000000,	0x05000000,	0x0105FF01,	0x034027FF,	0x00000000,
	0x1D000000,	0x01000002,	0x03102800,	0x00000000,	0x00000000,	0x01080000,	0x21108055,	0x00000000,	0x0A000108,	0x2127000A,
	0x0E8828FF,	0x00000000,	0x00000000,	0x01080000,	0x08082800,	0x00000000,	0x07000000,	0x01080001,	0x03082700,	0x00000000,
	0x1D000000,	0x01000002,	0x03082800,	0x00000000,	0x00000000,	0x01080000,	0x01088000,	0x00000000,	0x03000000,	0x221FE401,
	0x037829E4,	0x00000000,	0x1D000000,	0x01000002,	0x03082800,	0x00000000,	0x00000000,	0x01080000,	0x01088000,	0x00000000,
	0x04000000,	0x2220E401,	0x23782AE4,	0x00000000,	0x07E40109,	0x010A5501,	0x0EF829E4,	0x00000000,	0x1D000000,	0x01000002,
	0x03082800,	0x00000000,	0x00000000,	0x01080000,	0x01088000,	0x00000000,	0x00000000,	0x22210000,	0x00F82AE4,	0x00000000,
	0x19000000,	0x010AE402,	0x23782AE4,	0x00000000,	0x07E40109,	0x010AAA01,	0x0EF829E4,	0x00000000,	0x09000000,	0x0107E401,
	0x03782600,	0x00000000,	0x00000000,	0x00000000,	0x1E000000,	0x00000000,	0x1D000000,	0x01000002,	0x03402600,	0x00000000,
	0x00000000,	0x01060000,	0x010880FF,	0x00000000,	0x00000000,	0x01060000,	0x011080FF,	0x00000000,	0x00000000,	0x22220000,
	0x00B827A4,	0x00000000,	0x02000000,	0x2127A40A,	0x040827A4,	0x00000000,	0x00000000,	0x01070000,	0x08882700,	0x00000000,
	0x00000000,	0x01060000,	0x011080FF,	0x00000000,	0x02000000,	0x2127A40A,	0x03382700,	0x00000000,	0x09000000,	0x0187A402,
	0x023828A4,	0x00000000,	0x08000000,	0x0108A401,	0x040829A4,	0x00000000,	0x00000000,	0x01090000,	0x08882900,	0x00000000,
	0x08000000,	0x0109A401,	0x03382900,	0x00000000,	0x07000000,	0x0100A401,	0x044029F9,	0x00000000,	0x00000000,	0x01090000,
	0x00A026FF,	0x00000000,	0x09000000,	0x0100A401,	0x044029F9,	0x00000000,	0x00000000,	0x01090000,	0x008826FF,	0x00000000,
	0x00000000,	0x021A0000,	0x00902600,	0x00000000,	0x00000000,	0x00000000,	0x1C000D00,	0x00000000,	0x1D000000,	0x01000002,
	0x03082700,	0x00000000,	0x00000000,	0x01070000,	0x01088000,	0x00000000,	0x03000000,	0x221FE401,	0x037828E4,	0x00000000,
	0x1D000000,	0x01000002,	0x03082700,	0x00000000,	0x00000000,	0x01070000,	0x01088000,	0x00000000,	0x04000000,	0x2220E401,
	0x237829E4,	0x00000000,	0x07E40108,	0x01095501,	0x0EF828E4,	0x00000000,	0x1D000000,	0x01000002,	0x03082700,	0x00000000,
	0x00000000,	0x01070000,	0x01088000,	0x00000000,	0x00000000,	0x22210000,	0x00F829E4,	0x00000000,	0x19000000,	0x0109E402,
	0x237829E4,	0x00000000,	0x07E40108,	0x0109AA01,	0x0EF826E4,	0x00000000,	0x00000000,	0x00000000,	0x1E000000,	0x00000000,
	0x06000000,	0x0287AA01,	0x0D086100,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,	0x00000000,	0x02870000,
	0x00902700,	0x00000000,	0x00000000,	0x00000000,	0x18000100,	0x00000000,	0x00000000,	0x01060000,	0x009027AA,	0x00000000,
	0x06000000,	0x0287AA01,	0x0B202600,	0x00000000,	0x07000000,	0x01860002,	0x0BC02600,	0x00000000,	0x06000000,	0x0106FF01,
	0x024226AA,	0x00000000,	0x06000000,	0x0201FF01,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,	0x18800200,	0x00000000,
	0x00000000,	0x02870000,	0x00A02700,	0x00000000,	0x00000000,	0x00000000,	0x18000400,	0x00000000,	0x00000000,	0x01060000,
	0x07082600,	0x00000000,	0x06000000,	0x01060001,	0x03082655,	0x00000000,	0x00000000,	0x01060000,	0x06082600,	0x00000000,
	0x00000000,	0x01060000,	0x00A02700,	0x00000000,	0x00000000,	0x00000000,	0x1E000000,	0x00000000,	0x00000000,	0x02030000,
	0x237821E4,	0x00000000,	0x00E40101,	0x02045500,	0x2EF821E4,	0x00000000,	0x00E40101,	0x0205AA00,	0x2EF821E4,	0x00000000,
	0x00E40101,	0x0206FF00,	0x0EF800E4,	0x00000000,	0x00000000,	0x02070000,	0x237822E4,	0x00000000,	0x00E40102,	0x02085500,
	0x2EF822E4,	0x00000000,	0x00E40102,	0x0209AA00,	0x2EF822E4,	0x00000000,	0x00E40102,	0x020AFF00,	0x0EF822E4,	0x00000000,
	0x01000000,	0x020B0000,	0x233821A4,	0x00000000,	0x01A40101,	0x020C5500,	0x2EB821A4,	0x00000000,	0x01A40101,	0x020DAA00,
	0x0EB821A4,	0x00000000,	0x01000000,	0x0101A401,	0x041020A4,	0x00000000,	0x00000000,	0x01000000,	0x08902055,	0x00000000,
	0x01000000,	0x01009001,	0x03702054,	0x00000000,	0x03000000,	0x020E0000,	0x237823E4,	0x00000000,	0x03E40103,	0x020F5500,
	0x2EF823E4,	0x00000000,	0x03E40103,	0x0210AA00,	0x2EF823E4,	0x00000000,	0x03E40103,	0x0211FF00,	0x0EF802E4,	0x00000000,
	0x00000000,	0x02010000,	0x00C02100,	0x00000000,	0x1B000000,	0x01010002,	0x0C0861FF,	0x00000000,	0x00000000,	0x06010000,
	0x18800300,	0x00000000,	0x00000000,	0x00020000,	0x00F823E4,	0x00000000,	0x00000000,	0x00020000,	0x00F824E4,	0x00000000,
	0x00000000,	0x00000000,	0x18000200,	0x00000000,	0x00000000,	0x02170000,	0x00F823E4,	0x00000000,	0x00000000,	0x02180000,
	0x00F824E4,	0x00000000,	0x00000000,	0x021C0000,	0x00F821E4,	0x00000000,	0x00000000,	0x02000000,	0x00882000,	0x00000000,
	0x1E000000,	0x01000002,	0x0B882600,	0x00000000,	0x01000000,	0x01060002,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,
	0x18800C00,	0x00000000,	0x1D000000,	0x01000002,	0x03082600,	0x00000000,	0x00000000,	0x01060000,	0x01108000,	0x00000000,
	0x00000000,	0x02010000,	0x00882600,	0x00000000,	0x0B000000,	0x2126000A,	0x0C086100,	0x00000000,	0x00000000,	0x06010000,
	0x18800300,	0x00000000,	0x00000000,	0x00000000,	0x1C01AB00,	0x00000000,	0x06000000,	0x0101E401,	0x027821E4,	0x00000000,
	0x00000000,	0x00000000,	0x18000200,	0x00000000,	0x00000000,	0x00000000,	0x1C016500,	0x00000000,	0x06000000,	0x0101E401,
	0x027821E4,	0x00000000,	0x01000000,	0x01000002,	0x02082000,	0x00000000,	0x00000000,	0x00000000,	0x1801F100,	0x00000000,
	0x00000000,	0x01010000,	0x00F821E4,	0x00000000,	0x00000000,	0x01040000,	0x00C021FF,	0x00000000,	0x00000000,	0x01010000,
	0x00FA01E4,	0x00000000,	0x00000000,	0x00000000,	0x1E000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x3F800000,	0x3F800000,	0x3F800000,	0x3F800000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x41500000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,
	0x3F800000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x00000000,	0x3F800000,	0x00000000,	0x43340000,	0x00000000,
	0x00000000,	0x00000000,	0x00000043,	0x00000006,	0x00000009,	0x00000000,	0x00000000,	0x0000004A,	0x00000005,	0x00000009,
	0x00000000,	0x00000008,	0x0000005B,	0x00000006,	0x00000006,	0x00000000,	0x00000004,	0x00000CAC,	0x0000000E,	0x00000009,
	0x00000000,	0x0000000C,	0x00000000,	0x0000000B,	0x00000009,	0x00010004,	0x00000000,	0x00000050,	0x0000000A,	0x00000009,
	0x00010004,	0x00000004,	0x00000CBB,	0x00000009,	0x00000009,	0x00010004,	0x00000008,	0x0000000C,	0x00000019,	0x0000000E,
	0x00020001,	0x0000000C,	0x00000026,	0x0000000F,	0x0000000E,	0x00020001,	0x0000001C,	0x00000036,	0x0000000C,	0x0000000D,
	0x00020001,	0x0000002C,	0x00000062,	0x0000001B,	0x00000009,	0x00020001,	0x00000058,	0x0000007E,	0x0000001A,	0x00000009,
	0x00020001,	0x0000005C,	0x00000099,	0x0000001A,	0x00000009,	0x00020001,	0x00000060,	0x000000B4,	0x0000001B,	0x00000009,
	0x00020001,	0x00000064,	0x000000D0,	0x0000001C,	0x00000000,	0x00020001,	0x00000068,	0x000000ED,	0x00000014,	0x00000002,
	0x00020001,	0x0000006C,	0x00000102,	0x00000016,	0x00000009,	0x00020001,	0x0000007C,	0x00000119,	0x00000016,	0x00000009,
	0x00020001,	0x00000080,	0x00000130,	0x00000017,	0x00000009,	0x00020001,	0x00000084,	0x00000148,	0x00000017,	0x00000009,
	0x00020001,	0x00000088,	0x00000160,	0x00000019,	0x00000009,	0x00020001,	0x0000008C,	0x0000017A,	0x0000001C,	0x00000006,
	0x00020001,	0x00000090,	0x00000197,	0x0000001B,	0x00000000,	0x00020001,	0x00000094,	0x000001B3,	0x00000019,	0x00000000,
	0x00020001,	0x00000098,	0x000001CD,	0x0000001C,	0x00000000,	0x00020001,	0x0000009C,	0x000001EA,	0x00000022,	0x00000000,
	0x00020001,	0x000000A0,	0x0000020D,	0x00000020,	0x00000000,	0x00020001,	0x000000A4,	0x0000022E,	0x00000023,	0x00000000,
	0x00020001,	0x000000A8,	0x00000252,	0x0000001C,	0x00000002,	0x00020001,	0x000000AC,	0x0000026F,	0x00000016,	0x00000009,
	0x00020001,	0x000000B0,	0x00000286,	0x00000016,	0x00000009,	0x00020001,	0x000000B4,	0x0000029D,	0x00000017,	0x00000009,
	0x00020001,	0x000000B8,	0x000002B5,	0x00000017,	0x00000009,	0x00020001,	0x000000BC,	0x000002CD,	0x00000019,	0x00000009,
	0x00020001,	0x000000C0,	0x000002E7,	0x0000001C,	0x00000006,	0x00020001,	0x000000C4,	0x00000304,	0x0000001B,	0x00000000,
	0x00020001,	0x000000C8,	0x00000320,	0x00000019,	0x00000000,	0x00020001,	0x000000CC,	0x0000033A,	0x0000001C,	0x00000000,
	0x00020001,	0x000000D0,	0x00000357,	0x00000022,	0x00000000,	0x00020001,	0x000000D4,	0x0000037A,	0x00000020,	0x00000000,
	0x00020001,	0x000000D8,	0x0000039B,	0x00000023,	0x00000000,	0x00020001,	0x000000DC,	0x000003BF,	0x0000001C,	0x00000002,
	0x00020001,	0x000000E0,	0x000003DC,	0x00000016,	0x00000009,	0x00020001,	0x000000E4,	0x000003F3,	0x00000016,	0x00000009,
	0x00020001,	0x000000E8,	0x0000040A,	0x00000017,	0x00000009,	0x00020001,	0x000000EC,	0x00000422,	0x00000017,	0x00000009,
	0x00020001,	0x000000F0,	0x0000043A,	0x00000019,	0x00000009,	0x00020001,	0x000000F4,	0x00000454,	0x0000001C,	0x00000006,
	0x00020001,	0x000000F8,	0x00000471,	0x0000001B,	0x00000000,	0x00020001,	0x000000FC,	0x0000048D,	0x00000019,	0x00000000,
	0x00020001,	0x00000100,	0x000004A7,	0x0000001C,	0x00000000,	0x00020001,	0x00000104,	0x000004C4,	0x00000022,	0x00000000,
	0x00020001,	0x00000108,	0x000004E7,	0x00000020,	0x00000000,	0x00020001,	0x0000010C,	0x00000508,	0x00000023,	0x00000000,
	0x00020001,	0x00000110,	0x0000052C,	0x0000001C,	0x00000002,	0x00020001,	0x00000114,	0x00000549,	0x00000016,	0x00000009,
	0x00020001,	0x00000118,	0x00000560,	0x00000016,	0x00000009,	0x00020001,	0x0000011C,	0x00000577,	0x00000017,	0x00000009,
	0x00020001,	0x00000120,	0x0000058F,	0x00000017,	0x00000009,	0x00020001,	0x00000124,	0x000005A7,	0x00000019,	0x00000009,
	0x00020001,	0x00000128,	0x000005C1,	0x0000001C,	0x00000006,	0x00020001,	0x0000012C,	0x000005DE,	0x0000001B,	0x00000000,
	0x00020001,	0x00000130,	0x000005FA,	0x00000019,	0x00000000,	0x00020001,	0x00000134,	0x00000614,	0x0000001C,	0x00000000,
	0x00020001,	0x00000138,	0x00000631,	0x00000022,	0x00000000,	0x00020001,	0x0000013C,	0x00000654,	0x00000020,	0x00000000,
	0x00020001,	0x00000140,	0x00000675,	0x00000023,	0x00000000,	0x00020001,	0x00000144,	0x00000699,	0x0000001C,	0x00000002,
	0x00020001,	0x00000148,	0x000006B6,	0x00000016,	0x00000009,	0x00020001,	0x0000014C,	0x000006CD,	0x00000016,	0x00000009,
	0x00020001,	0x00000150,	0x000006E4,	0x00000017,	0x00000009,	0x00020001,	0x00000154,	0x000006FC,	0x00000017,	0x00000009,
	0x00020001,	0x00000158,	0x00000714,	0x00000019,	0x00000009,	0x00020001,	0x0000015C,	0x0000072E,	0x0000001C,	0x00000006,
	0x00020001,	0x00000160,	0x0000074B,	0x0000001B,	0x00000000,	0x00020001,	0x00000164,	0x00000767,	0x00000019,	0x00000000,
	0x00020001,	0x00000168,	0x00000781,	0x0000001C,	0x00000000,	0x00020001,	0x0000016C,	0x0000079E,	0x00000022,	0x00000000,
	0x00020001,	0x00000170,	0x000007C1,	0x00000020,	0x00000000,	0x00020001,	0x00000174,	0x000007E2,	0x00000023,	0x00000000,
	0x00020001,	0x00000178,	0x00000806,	0x0000001C,	0x00000002,	0x00020001,	0x0000017C,	0x00000823,	0x00000016,	0x00000009,
	0x00020001,	0x00000180,	0x0000083A,	0x00000016,	0x00000009,	0x00020001,	0x00000184,	0x00000851,	0x00000017,	0x00000009,
	0x00020001,	0x00000188,	0x00000869,	0x00000017,	0x00000009,	0x00020001,	0x0000018C,	0x00000881,	0x00000019,	0x00000009,
	0x00020001,	0x00000190,	0x0000089B,	0x0000001C,	0x00000006,	0x00020001,	0x00000194,	0x000008B8,	0x0000001B,	0x00000000,
	0x00020001,	0x00000198,	0x000008D4,	0x00000019,	0x00000000,	0x00020001,	0x0000019C,	0x000008EE,	0x0000001C,	0x00000000,
	0x00020001,	0x000001A0,	0x0000090B,	0x00000022,	0x00000000,	0x00020001,	0x000001A4,	0x0000092E,	0x00000020,	0x00000000,
	0x00020001,	0x000001A8,	0x0000094F,	0x00000023,	0x00000000,	0x00020001,	0x000001AC,	0x00000973,	0x0000001C,	0x00000002,
	0x00020001,	0x000001B0,	0x00000990,	0x00000016,	0x00000009,	0x00020001,	0x000001B4,	0x000009A7,	0x00000016,	0x00000009,
	0x00020001,	0x000001B8,	0x000009BE,	0x00000017,	0x00000009,	0x00020001,	0x000001BC,	0x000009D6,	0x00000017,	0x00000009,
	0x00020001,	0x000001C0,	0x000009EE,	0x00000019,	0x00000009,	0x00020001,	0x000001C4,	0x00000A08,	0x0000001C,	0x00000006,
	0x00020001,	0x000001C8,	0x00000A25,	0x0000001B,	0x00000000,	0x00020001,	0x000001CC,	0x00000A41,	0x00000019,	0x00000000,
	0x00020001,	0x000001D0,	0x00000A5B,	0x0000001C,	0x00000000,	0x00020001,	0x000001D4,	0x00000A78,	0x00000022,	0x00000000,
	0x00020001,	0x000001D8,	0x00000A9B,	0x00000020,	0x00000000,	0x00020001,	0x000001DC,	0x00000ABC,	0x00000023,	0x00000000,
	0x00020001,	0x000001E0,	0x00000AE0,	0x0000001C,	0x00000002,	0x00020001,	0x000001E4,	0x00000AFD,	0x00000016,	0x00000009,
	0x00020001,	0x000001E8,	0x00000B14,	0x00000016,	0x00000009,	0x00020001,	0x000001EC,	0x00000B2B,	0x00000017,	0x00000009,
	0x00020001,	0x000001F0,	0x00000B43,	0x00000017,	0x00000009,	0x00020001,	0x000001F4,	0x00000B5B,	0x00000019,	0x00000009,
	0x00020001,	0x000001F8,	0x00000B75,	0x0000001C,	0x00000006,	0x00020001,	0x000001FC,	0x00000B92,	0x0000001B,	0x00000000,
	0x00020001,	0x00000200,	0x00000BAE,	0x00000019,	0x00000000,	0x00020001,	0x00000204,	0x00000BC8,	0x0000001C,	0x00000000,
	0x00020001,	0x00000208,	0x00000BE5,	0x00000022,	0x00000000,	0x00020001,	0x0000020C,	0x00000C08,	0x00000020,	0x00000000,
	0x00020001,	0x00000210,	0x00000C29,	0x00000023,	0x00000000,	0x00020001,	0x00000214,	0x00000C4D,	0x0000001C,	0x00000002,
	0x00020001,	0x00000218,	0x00000C6A,	0x00000026,	0x00000009,	0x00020001,	0x00000070,	0x00000C91,	0x0000000C,	0x00000001,
	0x00020001,	0x00000078,	0x00000C9E,	0x0000000D,	0x0000000E,	0x00020001,	0x00000038,	0x00000002,	0x00000010,	0x505F6C67,
	0x7469736F,	0x006E6F69,	0x65646F4D,	0x6569566C,	0x6F725077,	0x7463656A,	0x4D6E6F69,	0x69727461,	0x6F4D0078,	0x566C6564,
	0x4D776569,	0x69727461,	0x6F4E0078,	0x6C616D72,	0x7274614D,	0x56007869,	0x65747265,	0x6F430078,	0x00726F6C,	0x6E6F7246,
	0x6C6F4374,	0x4E00726F,	0x616D726F,	0x7246006C,	0x4E746E6F,	0x6B636142,	0x6574614D,	0x6C616972,	0x696D652E,	0x6F697373,
	0x7246006E,	0x4E746E6F,	0x6B636142,	0x6574614D,	0x6C616972,	0x626D612E,	0x746E6569,	0x6F724600,	0x424E746E,	0x4D6B6361,
	0x72657461,	0x2E6C6169,	0x66666964,	0x00657375,	0x6E6F7246,	0x61424E74,	0x614D6B63,	0x69726574,	0x732E6C61,	0x75636570,
	0x0072616C,	0x6E6F7246,	0x61424E74,	0x614D6B63,	0x69726574,	0x732E6C61,	0x696E6968,	0x7373656E,	0x6C6F6300,	0x614D726F,
	0x69726574,	0x6E456C61,	0x656C6261,	0x694C0064,	0x53746867,	0x6372756F,	0x5D305B65,	0x626D612E,	0x746E6569,	0x67694C00,
	0x6F537468,	0x65637275,	0x2E5D305B,	0x66666964,	0x00657375,	0x6867694C,	0x756F5374,	0x5B656372,	0x732E5D30,	0x75636570,
	0x0072616C,	0x6867694C,	0x756F5374,	0x5B656372,	0x702E5D30,	0x7469736F,	0x006E6F69,	0x6867694C,	0x756F5374,	0x5B656372,
	0x682E5D30,	0x56666C61,	0x6F746365,	0x694C0072,	0x53746867,	0x6372756F,	0x5D305B65,	0x6F70732E,	0x72694474,	0x69746365,
	0x4C006E6F,	0x74686769,	0x72756F53,	0x305B6563,	0x70732E5D,	0x7845746F,	0x656E6F70,	0x4C00746E,	0x74686769,	0x72756F53,
	0x305B6563,	0x70732E5D,	0x7543746F,	0x66666F74,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D305B,	0x746F7073,	0x43736F43,
	0x666F7475,	0x694C0066,	0x53746867,	0x6372756F,	0x5D305B65,	0x6E6F632E,	0x6E617473,	0x74744174,	0x61756E65,	0x6E6F6974,
	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D305B,	0x656E696C,	0x74417261,	0x756E6574,	0x6F697461,	0x694C006E,	0x53746867,
	0x6372756F,	0x5D305B65,	0x6175712E,	0x74617264,	0x74416369,	0x756E6574,	0x6F697461,	0x694C006E,	0x53746867,	0x6372756F,
	0x5D305B65,	0x4473692E,	0x63657269,	0x6E6F6974,	0x4C006C61,	0x74686769,	0x72756F53,	0x315B6563,	0x6D612E5D,	0x6E656962,
	0x694C0074,	0x53746867,	0x6372756F,	0x5D315B65,	0x6669642E,	0x65737566,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D315B,
	0x63657073,	0x72616C75,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D315B,	0x69736F70,	0x6E6F6974,	0x67694C00,	0x6F537468,
	0x65637275,	0x2E5D315B,	0x666C6168,	0x74636556,	0x4C00726F,	0x74686769,	0x72756F53,	0x315B6563,	0x70732E5D,	0x6944746F,
	0x74636572,	0x006E6F69,	0x6867694C,	0x756F5374,	0x5B656372,	0x732E5D31,	0x45746F70,	0x6E6F7078,	0x00746E65,	0x6867694C,
	0x756F5374,	0x5B656372,	0x732E5D31,	0x43746F70,	0x666F7475,	0x694C0066,	0x53746867,	0x6372756F,	0x5D315B65,	0x6F70732E,
	0x736F4374,	0x6F747543,	0x4C006666,	0x74686769,	0x72756F53,	0x315B6563,	0x6F632E5D,	0x6174736E,	0x7441746E,	0x756E6574,
	0x6F697461,	0x694C006E,	0x53746867,	0x6372756F,	0x5D315B65,	0x6E696C2E,	0x41726165,	0x6E657474,	0x69746175,	0x4C006E6F,
	0x74686769,	0x72756F53,	0x315B6563,	0x75712E5D,	0x61726461,	0x41636974,	0x6E657474,	0x69746175,	0x4C006E6F,	0x74686769,
	0x72756F53,	0x315B6563,	0x73692E5D,	0x65726944,	0x6F697463,	0x006C616E,	0x6867694C,	0x756F5374,	0x5B656372,	0x612E5D32,
	0x6569626D,	0x4C00746E,	0x74686769,	0x72756F53,	0x325B6563,	0x69642E5D,	0x73756666,	0x694C0065,	0x53746867,	0x6372756F,
	0x5D325B65,	0x6570732E,	0x616C7563,	0x694C0072,	0x53746867,	0x6372756F,	0x5D325B65,	0x736F702E,	0x6F697469,	0x694C006E,
	0x53746867,	0x6372756F,	0x5D325B65,	0x6C61682E,	0x63655666,	0x00726F74,	0x6867694C,	0x756F5374,	0x5B656372,	0x732E5D32,
	0x44746F70,	0x63657269,	0x6E6F6974,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D325B,	0x746F7073,	0x6F707845,	0x746E656E,
	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D325B,	0x746F7073,	0x6F747543,	0x4C006666,	0x74686769,	0x72756F53,	0x325B6563,
	0x70732E5D,	0x6F43746F,	0x74754373,	0x0066666F,	0x6867694C,	0x756F5374,	0x5B656372,	0x632E5D32,	0x74736E6F,	0x41746E61,
	0x6E657474,	0x69746175,	0x4C006E6F,	0x74686769,	0x72756F53,	0x325B6563,	0x696C2E5D,	0x7261656E,	0x65747441,	0x7461756E,
	0x006E6F69,	0x6867694C,	0x756F5374,	0x5B656372,	0x712E5D32,	0x72646175,	0x63697461,	0x65747441,	0x7461756E,	0x006E6F69,
	0x6867694C,	0x756F5374,	0x5B656372,	0x692E5D32,	0x72694473,	0x69746365,	0x6C616E6F,	0x67694C00,	0x6F537468,	0x65637275,
	0x2E5D335B,	0x69626D61,	0x00746E65,	0x6867694C,	0x756F5374,	0x5B656372,	0x642E5D33,	0x75666669,	0x4C006573,	0x74686769,
	0x72756F53,	0x335B6563,	0x70732E5D,	0x6C756365,	0x4C007261,	0x74686769,	0x72756F53,	0x335B6563,	0x6F702E5D,	0x69746973,
	0x4C006E6F,	0x74686769,	0x72756F53,	0x335B6563,	0x61682E5D,	0x6556666C,	0x726F7463,	0x67694C00,	0x6F537468,	0x65637275,
	0x2E5D335B,	0x746F7073,	0x65726944,	0x6F697463,	0x694C006E,	0x53746867,	0x6372756F,	0x5D335B65,	0x6F70732E,	0x70784574,
	0x6E656E6F,	0x694C0074,	0x53746867,	0x6372756F,	0x5D335B65,	0x6F70732E,	0x74754374,	0x0066666F,	0x6867694C,	0x756F5374,
	0x5B656372,	0x732E5D33,	0x43746F70,	0x7543736F,	0x66666F74,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D335B,	0x736E6F63,
	0x746E6174,	0x65747441,	0x7461756E,	0x006E6F69,	0x6867694C,	0x756F5374,	0x5B656372,	0x6C2E5D33,	0x61656E69,	0x74744172,
	0x61756E65,	0x6E6F6974,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D335B,	0x64617571,	0x69746172,	0x74744163,	0x61756E65,
	0x6E6F6974,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D335B,	0x69447369,	0x74636572,	0x616E6F69,	0x694C006C,	0x53746867,
	0x6372756F,	0x5D345B65,	0x626D612E,	0x746E6569,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D345B,	0x66666964,	0x00657375,
	0x6867694C,	0x756F5374,	0x5B656372,	0x732E5D34,	0x75636570,	0x0072616C,	0x6867694C,	0x756F5374,	0x5B656372,	0x702E5D34,
	0x7469736F,	0x006E6F69,	0x6867694C,	0x756F5374,	0x5B656372,	0x682E5D34,	0x56666C61,	0x6F746365,	0x694C0072,	0x53746867,
	0x6372756F,	0x5D345B65,	0x6F70732E,	0x72694474,	0x69746365,	0x4C006E6F,	0x74686769,	0x72756F53,	0x345B6563,	0x70732E5D,
	0x7845746F,	0x656E6F70,	0x4C00746E,	0x74686769,	0x72756F53,	0x345B6563,	0x70732E5D,	0x7543746F,	0x66666F74,	0x67694C00,
	0x6F537468,	0x65637275,	0x2E5D345B,	0x746F7073,	0x43736F43,	0x666F7475,	0x694C0066,	0x53746867,	0x6372756F,	0x5D345B65,
	0x6E6F632E,	0x6E617473,	0x74744174,	0x61756E65,	0x6E6F6974,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D345B,	0x656E696C,
	0x74417261,	0x756E6574,	0x6F697461,	0x694C006E,	0x53746867,	0x6372756F,	0x5D345B65,	0x6175712E,	0x74617264,	0x74416369,
	0x756E6574,	0x6F697461,	0x694C006E,	0x53746867,	0x6372756F,	0x5D345B65,	0x4473692E,	0x63657269,	0x6E6F6974,	0x4C006C61,
	0x74686769,	0x72756F53,	0x355B6563,	0x6D612E5D,	0x6E656962,	0x694C0074,	0x53746867,	0x6372756F,	0x5D355B65,	0x6669642E,
	0x65737566,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D355B,	0x63657073,	0x72616C75,	0x67694C00,	0x6F537468,	0x65637275,
	0x2E5D355B,	0x69736F70,	0x6E6F6974,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D355B,	0x666C6168,	0x74636556,	0x4C00726F,
	0x74686769,	0x72756F53,	0x355B6563,	0x70732E5D,	0x6944746F,	0x74636572,	0x006E6F69,	0x6867694C,	0x756F5374,	0x5B656372,
	0x732E5D35,	0x45746F70,	0x6E6F7078,	0x00746E65,	0x6867694C,	0x756F5374,	0x5B656372,	0x732E5D35,	0x43746F70,	0x666F7475,
	0x694C0066,	0x53746867,	0x6372756F,	0x5D355B65,	0x6F70732E,	0x736F4374,	0x6F747543,	0x4C006666,	0x74686769,	0x72756F53,
	0x355B6563,	0x6F632E5D,	0x6174736E,	0x7441746E,	0x756E6574,	0x6F697461,	0x694C006E,	0x53746867,	0x6372756F,	0x5D355B65,
	0x6E696C2E,	0x41726165,	0x6E657474,	0x69746175,	0x4C006E6F,	0x74686769,	0x72756F53,	0x355B6563,	0x75712E5D,	0x61726461,
	0x41636974,	0x6E657474,	0x69746175,	0x4C006E6F,	0x74686769,	0x72756F53,	0x355B6563,	0x73692E5D,	0x65726944,	0x6F697463,
	0x006C616E,	0x6867694C,	0x756F5374,	0x5B656372,	0x612E5D36,	0x6569626D,	0x4C00746E,	0x74686769,	0x72756F53,	0x365B6563,
	0x69642E5D,	0x73756666,	0x694C0065,	0x53746867,	0x6372756F,	0x5D365B65,	0x6570732E,	0x616C7563,	0x694C0072,	0x53746867,
	0x6372756F,	0x5D365B65,	0x736F702E,	0x6F697469,	0x694C006E,	0x53746867,	0x6372756F,	0x5D365B65,	0x6C61682E,	0x63655666,
	0x00726F74,	0x6867694C,	0x756F5374,	0x5B656372,	0x732E5D36,	0x44746F70,	0x63657269,	0x6E6F6974,	0x67694C00,	0x6F537468,
	0x65637275,	0x2E5D365B,	0x746F7073,	0x6F707845,	0x746E656E,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D365B,	0x746F7073,
	0x6F747543,	0x4C006666,	0x74686769,	0x72756F53,	0x365B6563,	0x70732E5D,	0x6F43746F,	0x74754373,	0x0066666F,	0x6867694C,
	0x756F5374,	0x5B656372,	0x632E5D36,	0x74736E6F,	0x41746E61,	0x6E657474,	0x69746175,	0x4C006E6F,	0x74686769,	0x72756F53,
	0x365B6563,	0x696C2E5D,	0x7261656E,	0x65747441,	0x7461756E,	0x006E6F69,	0x6867694C,	0x756F5374,	0x5B656372,	0x712E5D36,
	0x72646175,	0x63697461,	0x65747441,	0x7461756E,	0x006E6F69,	0x6867694C,	0x756F5374,	0x5B656372,	0x692E5D36,	0x72694473,
	0x69746365,	0x6C616E6F,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D375B,	0x69626D61,	0x00746E65,	0x6867694C,	0x756F5374,
	0x5B656372,	0x642E5D37,	0x75666669,	0x4C006573,	0x74686769,	0x72756F53,	0x375B6563,	0x70732E5D,	0x6C756365,	0x4C007261,
	0x74686769,	0x72756F53,	0x375B6563,	0x6F702E5D,	0x69746973,	0x4C006E6F,	0x74686769,	0x72756F53,	0x375B6563,	0x61682E5D,
	0x6556666C,	0x726F7463,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D375B,	0x746F7073,	0x65726944,	0x6F697463,	0x694C006E,
	0x53746867,	0x6372756F,	0x5D375B65,	0x6F70732E,	0x70784574,	0x6E656E6F,	0x694C0074,	0x53746867,	0x6372756F,	0x5D375B65,
	0x6F70732E,	0x74754374,	0x0066666F,	0x6867694C,	0x756F5374,	0x5B656372,	0x732E5D37,	0x43746F70,	0x7543736F,	0x66666F74,
	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D375B,	0x736E6F63,	0x746E6174,	0x65747441,	0x7461756E,	0x006E6F69,	0x6867694C,
	0x756F5374,	0x5B656372,	0x6C2E5D37,	0x61656E69,	0x74744172,	0x61756E65,	0x6E6F6974,	0x67694C00,	0x6F537468,	0x65637275,
	0x2E5D375B,	0x64617571,	0x69746172,	0x74744163,	0x61756E65,	0x6E6F6974,	0x67694C00,	0x6F537468,	0x65637275,	0x2E5D375B,
	0x69447369,	0x74636572,	0x616E6F69,	0x7246006C,	0x4E746E6F,	0x6B636142,	0x6867694C,	0x646F4D74,	0x72506C65,	0x6375646F,
	0x63732E74,	0x43656E65,	0x726F6C6F,	0x6D756E00,	0x6867694C,	0x65735574,	0x65540064,	0x72757478,	0x74614D65,	0x00786972,
	0x746C754D,	0x78655469,	0x726F6F43,	0x54003064,	0x6F437865,	0x3064726F,	0x00000000,};

//checksum generated by simpleCheckSum()
static const unsigned int n8VertCheckSum = 217;

static const char* n8VertText = 
	"#define _isMipmap1             1 \n"
	"#define _isMipmap0             1 \n"
	"#define _fogMode               0 \n"
	"#define _texMode1              0 \n"
	"#define _texMode0              2 \n"
	"#define _pointSprite1          0 \n"
	"#define _pointSprite0          0 \n"
	"#define _matrixPaletteEnable   0 \n"
	"#define _userClip              0 \n"
	"#define _lightEnabled          1 \n"
	"#define _pointEnabled          0 \n"
	"\n"
	"\n"
	"\n"
	"uniform mat4 ModelViewProjectionMatrix ; \n"
	"\n"
	"//#if((_lightEnabled != 0) || (_fogMode != 0) || (_pointEnabled != 0)) \n"
	"uniform mat4 ModelViewMatrix; \n"
	"//#endif \n"
	"\n"
	"uniform mat3 NormalMatrix; \n"
	"\n"
	"\n"
	"\n"
	"attribute vec4 Vertex; \n"
	"attribute vec4 Color; \n"
	"\n"
	"//For matrix palette we support 4 vertex unit and 10 palette matrix,  \n"
	"//we store the Weights and MatrixIndices for 4 units in \\ xyzw\\  channel. \n"
	"#if (_matrixPaletteEnable == 1) \n"
	"\n"
	"#define MAX_PALETTE_MATRIX 10 \n"
	"#define MAX_VERTEX_UNIT 4 \n"
	"\n"
	"uniform float noOfVertexUnit; \n"
	"uniform mat4 paletteMatrices[MAX_PALETTE_MATRIX]; \n"
	"uniform mat3 paletteNormalMatrices[MAX_PALETTE_MATRIX]; \n"
	"attribute vec4 Weights; \n"
	"attribute vec4 MatrixIndices; \n"
	"#endif \n"
	"\n"
	"varying vec4 FrontColor; \n"
	"\n"
	"// User defined clip plane \n"
	"#if (_userClip == 1) \n"
	"const int MaxClipPlanes = 6; \n"
	"uniform vec4 ClipPlane[MaxClipPlanes]; \n"
	"uniform bool ClipPlaneEnabled[MaxClipPlanes]; \n"
	"varying float PlanePointDOT[MaxClipPlanes]; \n"
	"#endif \n"
	"\n"
	"\n"
	"//============================= \n"
	"// point \n"
	"#if _pointEnabled \n"
	"\n"
	"attribute float PointSize; \n"
	"\n"
	"struct PointParameters \n"
	"{ \n"
	"    float size; \n"
	"    float sizeMin; \n"
	"    float sizeMax; \n"
	"    float fadeThresholdSize; \n"
	"    float distanceConstantAttenuation; \n"
	"    float distanceLinearAttenuation; \n"
	"    float distanceQuadraticAttenuation; \n"
	"}; \n"
	"\n"
	"uniform PointParameters Point; \n"
	"uniform bool PointEnabled; \n"
	"\n"
	"//varying float DerivedPointSize;  \n"
	"float DerivedPointSize;              //  not used in fragment shader varying originally \n"
	"#endif \n"
	"\n"
	"//============================= \n"
	"// fog \n"
	"#if ((_fogMode == 2) ||(_fogMode == 3)) \n"
	"varying float FogFragCoord; \n"
	"//uniform bool FogEnabled; \n"
	"#endif \n"
	"\n"
	"\n"
	"#if (_fogMode == 1) \n"
	"\n"
	"#define LOG2E 1.442695  \n"
	"struct FogParameters \n"
	"{ \n"
	"    float density; \n"
	"    float start; \n"
	"    float end; \n"
	"    vec4 color; \n"
	"    float scale; // Derived: 1.0 / (end - start) \n"
	"    int mode; \n"
	"}; \n"
	"\n"
	"uniform FogParameters Fog; \n"
	"uniform bool FogEnabled; \n"
	"\n"
	"varying float fogLinear; \n"
	"#endif     \n"
	"\n"
	"\n"
	"// \n"
	"//============================= \n"
	"// lighting \n"
	"attribute vec3    Normal; \n"
	"\n"
	"\n"
	"#if  _lightEnabled   \n"
	"const int MaxLights = 8; \n"
	"\n"
	"struct MaterialParameters \n"
	"{ \n"
	"    vec4 emission; \n"
	"    vec4 ambient; \n"
	"    vec4 diffuse; \n"
	"    vec4 specular; \n"
	"    float shininess; \n"
	"}; \n"
	"\n"
	"uniform MaterialParameters FrontNBackMaterial; \n"
	"uniform bool colorMaterialEnabled; \n"
	"// currentMaterial global variable is used for copying FrontNBackMaterial because incase color material is enabled then  \n"
	"// we have to modify the material ambient and diffuse properties with current color which is not possible for uniforms \n"
	"MaterialParameters currentMaterial;  \n"
	"\n"
	"struct LightSourceParameters \n"
	"{ \n"
	"    vec4 ambient; \n"
	"    vec4 diffuse; \n"
	"    vec4 specular; \n"
	"    vec4 position; \n"
	"    vec4 halfVector; \n"
	"    vec3 spotDirection; \n"
	"    float spotExponent; \n"
	"    float spotCutoff; // (range: [0.0, 90.0], 180.0) \n"
	"    float spotCosCutoff; // cos(spotCutoff) (range: [1.0, 0.0], -1.0) \n"
	"    float constantAttenuation; \n"
	"    float linearAttenuation; \n"
	"    float quadraticAttenuation; \n"
	"    bool isDirectional; \n"
	"}; \n"
	"\n"
	"uniform LightSourceParameters LightSource[MaxLights]; \n"
	"\n"
	"struct LightModelParameters \n"
	"{ \n"
	"    vec4 ambient; \n"
	"    bool isTwoSided; \n"
	"}; \n"
	"\n"
	"uniform LightModelParameters LightModel; \n"
	"\n"
	"uniform bool LightEnabled[MaxLights]; \n"
	"uniform bool LightingEnabled; \n"
	"\n"
	"struct LightModelProducts \n"
	"{ \n"
	"    vec4 sceneColor; \n"
	"}; \n"
	"\n"
	"uniform LightModelProducts FrontNBackLightModelProduct; \n"
	"\n"
	"struct LightProducts \n"
	"{ \n"
	"    vec4 ambient; \n"
	"    vec4 diffuse; \n"
	"    vec4 specular; \n"
	"}; \n"
	"\n"
	"uniform LightProducts FrontNBackLightProduct[MaxLights]; \n"
	"\n"
	"uniform int numLightUsed; \n"
	"\n"
	"\n"
	"\n"
	"#endif \n"
	"\n"
	"// \n"
	"//============================= \n"
	"// texturing \n"
	"\n"
	"#if ((_texMode0 != 0) || (_texMode1 != 0)) \n"
	"uniform mat4 TextureMatrix[2];     \n"
	"#endif \n"
	"\n"
	"#if (_texMode0 != 0) \n"
	"\n"
	"attribute vec4 MultiTexCoord0; \n"
	"varying vec4 TexCoord0; \n"
	"#endif \n"
	"\n"
	"// this is temorary fix for multi texture after compiler bug fix for array we can revert it back (Sandeep Nanda) \n"
	"//varying vec4 TexCoord[MaxTextureCoords]; \n"
	"\n"
	"#if(_texMode1 != 0)    \n"
	"attribute vec4 MultiTexCoord1; \n"
	"varying vec4 TexCoord1; \n"
	"#endif \n"
	"//============================= \n"
	"// miscellaneous \n"
	"\n"
	"uniform bool MultiSampleEnabled; \n"
	"\n"
	"// \n"
	"// functions \n"
	"// \n"
	"#if  _lightEnabled   \n"
	"vec4 lit(float NdotL, float NdotH, float m); \n"
	"\n"
	"\n"
	"vec4 light_point_view_local( \n"
	"vec3 epos, // the eye space vertex position \n"
	"vec3 normal, // the vertex normal \n"
	"int idx ); \n"
	"\n"
	"vec4 light_directional_view_local( \n"
	"vec3 epos,         //the eye space vertex position \n"
	"vec3 normal,         //the vertex normal \n"
	"int idx )  ; \n"
	"#endif \n"
	"\n"
	"void main(void) \n"
	"{ \n"
	"    vec4 epos = vec4(0.0, 0.0, 0.0, 0.0); \n"
	"    vec3 normal; \n"
	"    mat4 palMat; \n"
	"    \n"
	"    // position \n"
	"    #if (_matrixPaletteEnable == 0) \n"
	"    { \n"
	"        \n"
	"        gl_Position = ModelViewProjectionMatrix * Vertex;    \n"
	"        \n"
	"        //#if((_lightEnabled !=0 ) || (_fogMode != 0) || (_pointEnabled != 0)) \n"
	"        epos = ModelViewMatrix * Vertex; // The eye-space vertex position   \n"
	"        //#endif \n"
	"        \n"
	"        normal = normalize(NormalMatrix * Normal); \n"
	"        \n"
	"    } \n"
	"    #elif (_matrixPaletteEnable == 1) \n"
	"    { \n"
	"        vec4 position = vec4(0.0, 0.0, 0.0, 0.0); \n"
	"        vec3 tnormal = vec3(0.0, 0.0, 0.0); \n"
	"        \n"
	"        if (noOfVertexUnit >0.0) \n"
	"        { \n"
	"            position  = Weights.x * (paletteMatrices[int(MatrixIndices.x)] * Vertex); \n"
	"            tnormal = Weights.x * (paletteNormalMatrices[int(MatrixIndices.x)] * Normal); \n"
	"        } \n"
	"        if (noOfVertexUnit > 1.0)    \n"
	"        { \n"
	"            position += Weights.y * (paletteMatrices[int(MatrixIndices.y)] * Vertex); \n"
	"            tnormal += Weights.y * (paletteNormalMatrices[int(MatrixIndices.y)] * Normal); \n"
	"        } \n"
	"        if (noOfVertexUnit > 2.0) \n"
	"        { \n"
	"            position += Weights.z * (paletteMatrices[int(MatrixIndices.z)] * Vertex); \n"
	"            tnormal += Weights.z * (paletteNormalMatrices[int(MatrixIndices.z)] * Normal); \n"
	"        } \n"
	"        if (noOfVertexUnit > 3.0) \n"
	"        { \n"
	"            position += Weights.w * (paletteMatrices[int(MatrixIndices.w)] * Vertex); \n"
	"            tnormal += Weights.w * (paletteNormalMatrices[int(MatrixIndices.w)] * Normal); \n"
	"        } \n"
	"        \n"
	"        // The eye-space vertex position              \n"
	"        epos = position; \n"
	"        \n"
	"        // In matrix palette case, resultant position is in eye space coordinate \n"
	"        // So ModelViewProjectionMatrix will contain projection matrix. \n"
	"        gl_Position = ModelViewProjectionMatrix * position; \n"
	"        \n"
	"        normal = normalize (tnormal); \n"
	"    } \n"
	"    #endif \n"
	"    \n"
	"    FrontColor = Color;   \n"
	"    \n"
	"    #if (_texMode0 != 0) \n"
	"    TexCoord0 = TextureMatrix[0]*MultiTexCoord0; // Temporary Fix for Multitexture (Sandeep Nanda) \n"
	"    #endif \n"
	"    \n"
	"    #if(_texMode1 != 0)     \n"
	"    TexCoord1 = TextureMatrix[1]*MultiTexCoord1;// Temporary Fix for Multitexture (Sandeep Nanda) \n"
	"    #endif \n"
	"    \n"
	"    //User Defined Clip plane enabled \n"
	"    #if (_userClip == 1) \n"
	"    \n"
	"    if (ClipPlaneEnabled[0]) \n"
	"    { \n"
	"        PlanePointDOT[0] = dot(epos, ClipPlane[0]); \n"
	"    } \n"
	"    \n"
	"    if (ClipPlaneEnabled[1]) \n"
	"    { \n"
	"        PlanePointDOT[1] = dot(epos, ClipPlane[1]); \n"
	"    } \n"
	"    \n"
	"    if (ClipPlaneEnabled[2]) \n"
	"    { \n"
	"        PlanePointDOT[2] = dot(epos, ClipPlane[2]); \n"
	"    } \n"
	"    \n"
	"    if (ClipPlaneEnabled[3]) \n"
	"    { \n"
	"        PlanePointDOT[3] = dot(epos, ClipPlane[3]); \n"
	"    } \n"
	"    \n"
	"    if (ClipPlaneEnabled[4]) \n"
	"    { \n"
	"        PlanePointDOT[4] = dot(epos, ClipPlane[4]); \n"
	"    } \n"
	"    \n"
	"    if (ClipPlaneEnabled[5]) \n"
	"    { \n"
	"        PlanePointDOT[5] = dot(epos, ClipPlane[5]); \n"
	"    } \n"
	"    \n"
	"    #endif \n"
	"    \n"
	"    // \n"
	"    //================================== \n"
	"    // lighting \n"
	"    \n"
	"    #if  _lightEnabled  \n"
	"    \n"
	"    \n"
	"    currentMaterial.specular = FrontNBackMaterial.specular; \n"
	"    currentMaterial.shininess = FrontNBackMaterial.shininess; \n"
	"    \n"
	"    if (colorMaterialEnabled) \n"
	"    { \n"
	"        // If color material is enabled then update the material ambient and diffuse color to \n"
	"        // current color(generic vertex color or vertex color pointer) \n"
	"        currentMaterial.ambient = FrontColor; \n"
	"        currentMaterial.diffuse = FrontColor; \n"
	"    } \n"
	"    else \n"
	"    { \n"
	"        currentMaterial.ambient = FrontNBackMaterial.ambient; \n"
	"        currentMaterial.diffuse = FrontNBackMaterial.diffuse; \n"
	"        \n"
	"    } \n"
	"    \n"
	"    int i; \n"
	"    \n"
	"    vec4 vcolor =FrontNBackLightModelProduct.sceneColor; // emission_material + ambient_light * ambient_material              \n"
	"    \n"
	"    for(i=0; i <  numLightUsed ; i++) \n"
	"    { \n"
	"        //directional light                           \n"
	"        if(LightSource[i].isDirectional) \n"
	"        vcolor += light_directional_view_local(epos.xyz/epos.w, normal, i);                                 \n"
	"        else // point light \n"
	"        vcolor += light_point_view_local(epos.xyz, normal, i); \n"
	"        \n"
	"    } \n"
	"    \n"
	"    FrontColor = vcolor ; \n"
	"    FrontColor.a = currentMaterial.diffuse.a; \n"
	"    \n"
	"    #endif \n"
	"    FrontColor =  clamp(FrontColor, 0.0, 1.0); \n"
	"    \n"
	"    // \n"
	"    //================================== \n"
	"    // Point Size Enabled     \n"
	"    #if _pointEnabled \n"
	"    \n"
	"    gl_PointSize =  PointSize;  \n"
	"    \n"
	"    #endif \n"
	"    \n"
	"    \n"
	"    //================================== \n"
	"    // fog \n"
	"    \n"
	"    #if ((_fogMode == 2) ||(_fogMode == 3)) \n"
	"    FogFragCoord = abs(epos.z);   \n"
	"    # endif \n"
	"    \n"
	"    #if ( _fogMode == 1) \n"
	"    { \n"
	"        float eyePos = abs(epos.z); \n"
	"        // f= (end - z) * (end - start) \n"
	"        fogLinear = (Fog.end - eyePos) * Fog.scale; \n"
	"    }         \n"
	"    #endif         \n"
	"    \n"
	"} \n"
	"\n"
	"#if _lightEnabled \n"
	"// point light and local viewer \n"
	"vec4 light_point_view_local( \n"
	"vec3 epos, // the eye space vertex position \n"
	"vec3 normal, // the vertex normal \n"
	"int idx ) \n"
	"{ \n"
	"    //LightSourceParameters light = LightSource[idx]; \n"
	"    \n"
	"    // vector from vertex to the light \n"
	"    vec3 vert2light = LightSource[idx].position.xyz - epos; //changed \n"
	"    \n"
	"    // light direction \n"
	"    vec3 ldir = normalize(vert2light);            \n"
	"    \n"
	"    // distance between the two, need this for attenuation \n"
	"    float d = length(vert2light);          \n"
	"    \n"
	"    //view direction, redundent for multiple lights \n"
	"    \n"
	"    vec3 vdir = vec3(0.0,0.0,1.0); \n"
	"    \n"
	"    //vec3 eye = vec3(0.0,0.0,0.0);      \n"
	"    \n"
	"    //halfway vector \n"
	"    vec3 halfv =  normalize(ldir + vdir);  \n"
	"    \n"
	"    // Compute the diffuse and specular coefficients \n"
	"    //  the diffuse cosine is in coeffs.y, the specular is in coeffs.z \n"
	"    \n"
	"    vec4 coeffs = lit(dot(normal,ldir), dot(normal,halfv), FrontNBackMaterial.shininess); \n"
	"    \n"
	"    /////////////////////////////////////////////////////////////////////////////////// \n"
	"    float spotEffect ; \n"
	"    float NdotL = max(dot(normal,ldir),0.0); \n"
	"    \n"
	"    float spotDot = dot(-ldir, LightSource[idx].spotDirection); \n"
	"    \n"
	"    if(LightSource[idx].spotCutoff >= 180.00) \n"
	"    spotEffect = 1.0; \n"
	"    else if (spotDot < LightSource[idx].spotCosCutoff) \n"
	"    spotEffect = 0.0; // light adds no contribution \n"
	"    else \n"
	"    spotEffect = pow(spotDot, LightSource[idx].spotExponent); \n"
	"    \n"
	"    ////////////////////////////////////////////////////////////////////////////////// \n"
	"    \n"
	"    // Compute the standard shading model \n"
	"    float att = 1.0/(LightSource[idx].constantAttenuation  \n"
	"    + d*LightSource[idx].linearAttenuation + d*d*LightSource[idx].quadraticAttenuation); \n"
	"    vec4 outCol = att* spotEffect *  //attenuation term \n"
	"    (LightSource[idx].ambient*currentMaterial.ambient +                       //ambient term \n"
	"    LightSource[idx].diffuse*currentMaterial.diffuse*coeffs.y +            //diffuse term \n"
	"    LightSource[idx].specular*currentMaterial.specular*coeffs.z);            //specular term \n"
	"    \n"
	"    \n"
	"    return outCol; \n"
	"} \n"
	"\n"
	"// directional light and local viewer \n"
	"vec4 light_directional_view_local( \n"
	"vec3 epos,         //the eye space vertex position \n"
	"vec3 normal,         //the vertex normal \n"
	"int idx )     \n"
	"{ \n"
	"    //LightSourceParameters light = LightSource[idx]; \n"
	"    //vec3 vdir = normalize(-epos); //changed \n"
	"    \n"
	"    vec3 lightDir = normalize(LightSource[idx].position.xyz); \n"
	"    vec3 vdir = vec3(0.0,0.0,1.0);     \n"
	"    vec3 halfv = normalize(lightDir + vdir); \n"
	"    \n"
	"    \n"
	"    vec4 coeffs = lit(dot(normal, lightDir), dot(normal,halfv),FrontNBackMaterial.shininess); \n"
	"    \n"
	"    // Compute the standard shading model \n"
	"    vec4 outCol = LightSource[idx].ambient*currentMaterial.ambient +               //ambient term \n"
	"    LightSource[idx].diffuse* currentMaterial.diffuse*coeffs.y  +      //diffuse term \n"
	"    LightSource[idx].specular*currentMaterial.specular*coeffs.z ;            //specular term \n"
	"    \n"
	"    return outCol; \n"
	"} \n"
	"\n"
	"vec4 lit(float NdotL, float NdotH, float m) \n"
	"{ \n"
	"    vec4 coeff; \n"
	"    // ambient coefficient, which is always 1.0 \n"
	"    coeff.x = 1.0; \n"
	"    \n"
	"    // diffuse coefficient \n"
	"    if(NdotL < 0.0) coeff.y = 0.0; \n"
	"    else coeff.y = NdotL; \n"
	"    \n"
	"    //specular coefficient \n"
	"    if(NdotL <= 0.0 || NdotH < 0.0)  \n"
	"    coeff.z = 0.0; \n"
	"    else  \n"
	"    coeff.z = pow(NdotH, m); \n"
	"    \n"
	"    coeff.w = 1.0; \n"
	"    \n"
	"    return coeff; \n"
	"} \n"
	"#endif \n"
	"";

#ifdef GL_HELPERS_INCLUDED
//glHelpers.h must be included BEFORE any of the shader header files. Also make sure you have the latest version of glHelpers.h
static ghShader n8VertShader(n8VertText, n8Vert, n8VertLength, n8VertCheckSum);


#endif


#endif //_n8Vert_h_
